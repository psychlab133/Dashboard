/// Copyright Erik Weitnauer 2015.
gmath.ui.version = "0.1.2x";
gmath.ui.gm_version = "0.6.4";
gmath.ui = gmath.ui || {};
gmath.ui.Path = function() {
    var t = function(t, e) {
        this.container = d3.select(t);
        this.element = null;
        e = e || {};
        this.id = e.id || gmath.uid();
        this.oid = e.oid;
        this.points = e.points || [];
        this.color = e.color || "black";
        this.width = e.width || 1;
        this.type = e.type;
        this.init()
    };
    t.prototype.toJSON = function() {
        return {
            id: this.id,
            type: "Path",
            points: this.points,
            color: this.color,
            width: this.width
        }
    };
    t.line = typeof d3 === "undefined" || typeof d3.svg === "undefined" ? null : d3.svg.line();
    t.prototype.init = function() {
        var t = null;
        if (this.oid) t = "#" + this.oid;
        this.element = this.container.insert("path", t).attr("id", this.id).style("fill", "none").style("stroke-linecap", "round").style("stroke-linejoin", "round");
        return this.update()
    };
    t.prototype.update = function() {
        this.element.attr("d", t.line(this.points) + (this.points.length === 1 ? "Z" : "")).style("stroke", this.color).style("stroke-width", this.width);
        return this
    };
    t.prototype.remove = function() {
        this.element.remove();
        return this
    };
    t.prototype.setContainer = function(t) {
        if (arguments.length === 0) return this.container;
        this.container = t;
        return this
    };
    t.prototype.renderOnto = function(t) {
        var e = this.element,
            n = this.container;
        this.container = t;
        this.element = t.select("#" + this.id);
        if (this.element.empty()) this.init();
        else this.update();
        this.container = n;
        this.element = e
    };
    return t
}();
gm_erase_paths = function() {
    function t(t, e, n) {
        n = n || 20;
        var r = [];
        var i = function(t) {
            var i = e[0][0];
            var o = e[0][1];
            var a = 0;
            var l = 0;
            if (t.length === 1) {
                if (!s(t[0][0], t[0][1], i, o, n)) {
                    r.push(t);
                    return
                }
            }
            var p;
            while (a < t.length - 1) {
                var h = t[a];
                var d = t[a + 1];
                var f = s(h[0], h[1], i, o, n);
                var y = s(d[0], d[1], i, o, n);
                if (f && y) {
                    a++;
                    l = a
                } else if (f && !y) {
                    var m = u(h[0], h[1], d[0], d[1], i, o, n);
                    if (m) {
                        t[a] = m;
                        l = a
                    } else {
                        a++
                    }
                } else if (!f && y) {
                    var m = u(d[0], d[1], h[0], h[1], i, o, n);
                    if (m) {
                        p = t.slice(l, a + 1);
                        p.push(m);
                        r.push(p)
                    }
                    a++;
                    l = a
                } else {
                    var g = c(h[0], h[1], d[0], d[1], i, o, n);
                    if (g) {
                        p = t.slice(l, a + 1);
                        if (p[p.length - 1][0] !== g[0][0] || p[p.length - 1][1] !== g[0][1]) {
                            p.push(g[0])
                        }
                        if (p.length > 1) r.push(p);
                        t[a] = g[1];
                        if (t[a + 1] && t[a + 1][0] == g[1][0] && t[a + 1][1] == g[1][1]) a++;
                        l = a
                    } else {
                        a++
                    }
                }
            }
            if (l !== a) {
                p = t.slice(l, t.length);
                if (p) {
                    r.push(p)
                }
            }
        };
        var a = function(t, i) {
            if (t.path) {
                n = n + t.width / 2;
                var t = t.path
            }
            var o = e[i];
            var a = e[i + 1];
            var i = 0;
            var s = 0;
            if (t.length === 1) {
                var l = p(t[0][0], t[0][1], o[0], o[1], a[0], a[1], n);
                if (l.indexOf(1) === -1) {
                    r.push(t);
                    return
                }
            }
            var h;
            while (i < t.length - 1) {
                var u = t[i];
                var c = t[i + 1];
                var l = p(u[0], u[1], o[0], o[1], a[0], a[1], n);
                var d = p(c[0], c[1], o[0], o[1], a[0], a[1], n);
                if (l.indexOf(1) !== -1 && d.indexOf(1) !== -1) {
                    i++;
                    s = i
                } else if (l.indexOf(1) !== -1 && d.indexOf(1) === -1) {
                    var m = f(u[0], u[1], l, c[0], c[1], o[0], o[1], a[0], a[1], n);
                    if (m) {
                        t[i] = m;
                        s = i
                    } else {
                        i++
                    }
                } else if (l.indexOf(1) === -1 && d.indexOf(1) !== -1) {
                    var m = f(c[0], c[1], d, u[0], u[1], o[0], o[1], a[0], a[1], n);
                    if (m) {
                        h = t.slice(s, i + 1);
                        h.push(m);
                        r.push(h);
                        i++;
                        s = i
                    } else {
                        i++
                    }
                } else {
                    var g = y(u[0], u[1], c[0], c[1], o[0], o[1], a[0], a[1], n);
                    if (g) {
                        h = t.slice(s, i + 1);
                        if (h[h.length - 1][0] !== g[0][0] || h[h.length - 1][1] !== g[0][1]) {
                            h.push(g[0])
                        }
                        if (h.length > 1) r.push(h);
                        t[i] = g[1];
                        if (t[i + 1] && t[i + 1][0] == g[1][0] && t[i + 1][1] == g[1][1]) i++;
                        s = i
                    } else {
                        i++
                    }
                }
            }
            if (s !== i) {
                h = t.slice(s, t.length);
                if (h) {
                    r.push(h)
                }
            }
        };
        e = o({
            path: e
        });
        if (e.length === 1) {
            for (var l = 0; l < t.length; l++) {
                i(t[l])
            }
            t = r
        } else {
            for (var h = 0; h < e.length - 1; h++) {
                for (var l = 0; l < t.length; l++) {
                    a(t[l], h)
                }
                t = r;
                r = []
            }
        }
        for (var d = 0; d < t.length; d++) {
            for (var m = 0; m < t[d].length; m++) {
                t[d][m][0] = Math.round(t[d][m][0]);
                t[d][m][1] = Math.round(t[d][m][1])
            }
        }
        return t
    }

    function e(t) {
        if (t.path) {
            var t = t.path
        }
        document.write("[");
        for (var e = 0; e < t.length - 1; e++) {
            document.write("[" + t[e][0] + "," + t[e][1] + "],")
        }
        document.write("[" + t[e][0] + "," + t[e][1] + "]");
        document.write("]")
    }

    function n(t) {
        document.write("[");
        for (var n = 0; n < t.length - 1; n++) {
            e(t[n]);
            document.write(",<br />")
        }
        e(t[n]);
        document.write("]")
    }

    function r(t, e) {
        if (t.path) {
            var t = t.path
        }
        var n = "";
        n += "[";
        for (var r = 0; r < t.length - 1; r++) {
            n += "[" + t[r][0] + "," + t[r][1] + "],"
        }
        n += "[" + t[r][0] + "," + t[r][1] + "]";
        n += "]";
        if (e) {
            console.log(n)
        } else {
            return n
        }
    }

    function i(t) {
        log = "";
        log += "[";
        for (var e = 0; e < t.length - 1; e++) {
            log += r(t[e], 0);
            log += ","
        }
        log += r(t[e], 0);
        log += "]";
        console.log(log)
    }

    function o(t) {
        if (t.path) {
            var t = t.path
        }
        var e = [];
        if (t.length === 1) {
            e = t
        } else {
            pClean = 0;
            while (pClean < t.length - 1) {
                if (t[pClean][0] !== t[pClean + 1][0] || t[pClean][1] !== t[pClean + 1][1]) {
                    e.push(t[pClean])
                }
                pClean++
            }
            if (t.length !== 0 && e.length === 0) {
                e.push(t[0])
            }
            if (t[t.length - 1][0] !== t[e.length - 1][0] || t[t.length - 1][1] !== t[e.length - 1][1]) {
                e.push(t[pClean])
            }
        }
        return e
    }

    function a(t, e, n, r) {
        return Math.sqrt(Math.pow(n - t, 2) + Math.pow(r - e, 2))
    }

    function s(t, e, n, r, i) {
        var o = a(t, e, n, r);
        if (o < i) return 1;
        else return 0
    }

    function l(t, e, n, r, i, o, a) {
        var s = [i - n, o - r];
        var l = [t - n, e - r];
        var p = [-s[1], s[0]];
        var h = Math.sqrt(Math.pow(p[0], 2) + Math.pow(p[1], 2));
        var u = [p[0] / h, p[1] / h];
        var c = Math.sqrt(Math.pow(s[0], 2) + Math.pow(s[1], 2));
        var d = [s[0] / c, s[1] / c];
        var f = l[0] * d[0] + l[1] * d[1];
        if (f <= 0 || f >= c) return 0;
        var y = l[0] * u[0] + l[1] * u[1];
        if (y >= a || y <= -a) return 0;
        return 1
    }

    function p(t, e, n, r, i, o, a) {
        var p = [];
        p.push(s(t, e, n, r, a));
        p.push(s(t, e, i, o, a));
        p.push(l(t, e, n, r, i, o, a));
        return p
    }

    function h(t, e, n, r, i) {
        var o = [n - t, r - e];
        var a = [-o[1], o[0]];
        var s = Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2));
        var l = [a[0] / s, a[1] / s];
        var p = [t + i * l[0], e + i * l[1]];
        var h = [t - i * l[0], e - i * l[1]];
        var u = [n - i * l[0], r - i * l[1]];
        var c = [n + i * l[0], r + i * l[1]];
        return [p, h, u, c]
    }

    function u(t, e, n, r, i, o, a) {
        var s = [i - t, o - e];
        var l = [n - t, r - e];
        var p = Math.sqrt(Math.pow(l[0], 2) + Math.pow(l[1], 2));
        var h = [l[0] / p, l[1] / p];
        var u = s[0] * h[0] + s[1] * h[1];
        var c = [t + u * h[0], e + u * h[1]];
        var d = Math.sqrt(Math.pow(i - c[0], 2) + Math.pow(o - c[1], 2));
        var f;
        if (d === 0) {
            f = a
        } else {
            var f = Math.sqrt(Math.pow(a, 2) - Math.pow(d, 2))
        }
        var y = [t + u * h[0] + f * h[0], e + u * h[1] + f * h[1]];
        if (y[0] === t && y[1] === e) return null;
        return y
    }

    function c(t, e, n, r, i, o, a) {
        var s = [i - t, o - e];
        var l = [n - t, r - e];
        var p = [-l[1], l[0]];
        var h = Math.sqrt(Math.pow(p[0], 2) + Math.pow(p[1], 2));
        var u = [p[0] / h, p[1] / h];
        var c = s[0] * u[0] + s[1] * u[1];
        var d = v([t, e], [n, r], [i, o]);
        var f = m([d[0] - i, d[1] - o]);
        if (f >= a) return null;
        var y = Math.sqrt(Math.pow(a, 2) - Math.pow(c, 2));
        var g = [i - c * u[0], o - c * u[1]];
        var _ = Math.sqrt(Math.pow(l[0], 2) + Math.pow(l[1], 2));
        var b = [l[0] / _, l[1] / _];
        var w = [
            [g[0] - b[0] * y, g[1] - b[1] * y],
            [g[0] + b[0] * y, g[1] + b[1] * y]
        ];
        if (w[0][0] === t && w[0][1] === e) return null;
        return w
    }

    function d(t, e, n, r, i, o, a, s) {
        var l, p, h, u;
        l = n - t;
        p = r - e;
        h = a - i;
        u = s - o;
        var c, d;
        if (-h * p + l * u === 0) return null;
        c = (-p * (t - i) + l * (e - o)) / (-h * p + l * u);
        d = (h * (e - o) - u * (t - i)) / (-h * p + l * u);
        if (c >= 0 && c <= 1 && d >= 0 && d <= 1) {
            var f = t + d * l;
            var y = e + d * p;
            return [f, y]
        }
        return null
    }

    function f(t, e, n, r, i, o, s, l, p, f) {
        var y = h(o, s, l, p, f);
        var m = [];
        if (n[0] && !n[1]) {
            m.push(u(t, e, r, i, o, s, f));
            m.push(d(t, e, r, i, y[0][0], y[0][1], y[3][0], y[3][1]));
            m.push(d(t, e, r, i, y[1][0], y[1][1], y[2][0], y[2][1]));
            var g = c(t, e, r, i, l, p, f);
            if (g) m.push(g[0], g[1])
        } else if (!n[0] && n[1]) {
            m.push(u(t, e, r, i, l, p, f));
            m.push(d(t, e, r, i, y[0][0], y[0][1], y[3][0], y[3][1]));
            m.push(d(t, e, r, i, y[1][0], y[1][1], y[2][0], y[2][1]));
            var g = c(t, e, r, i, o, s, f);
            if (g) m.push(g[0], g[1])
        } else if (n[0] && n[1]) {
            m.push(u(t, e, r, i, o, s, f));
            m.push(d(t, e, r, i, y[0][0], y[0][1], y[3][0], y[3][1]));
            m.push(d(t, e, r, i, y[1][0], y[1][1], y[2][0], y[2][1]));
            m.push(u(t, e, r, i, l, p, f))
        } else {
            var g = c(t, e, r, i, l, p, f);
            var v = c(t, e, r, i, o, s, f);
            if (g) m.push(g[0], g[1]);
            if (v) m.push(v[0], v[1]);
            m.push(d(t, e, r, i, y[0][0], y[0][1], y[3][0], y[3][1]));
            m.push(d(t, e, r, i, y[1][0], y[1][1], y[2][0], y[2][1]))
        }
        var _ = [t, e];
        for (var b = 0; b < m.length; b++) {
            if (m[b]) {
                if (a(m[b][0], m[b][1], r, i) < a(_[0], _[1], r, i)) {
                    _ = m[b]
                }
            }
        }
        if (_[0] === t && _[1] === e) return null;
        return _
    }

    function y(t, e, n, r, i, o, s, l, p) {
        var u = h(i, o, s, l, p);
        var f = [];
        var y = c(t, e, n, r, i, o, p);
        if (y) f.push(y[0], y[1]);
        y = c(t, e, n, r, s, l, p);
        if (y) f.push(y[0], y[1]);
        f.push(d(t, e, n, r, u[0][0], u[0][1], u[3][0], u[3][1]));
        f.push(d(t, e, n, r, u[1][0], u[1][1], u[2][0], u[2][1]));
        var m = [n, r];
        var g = [t, e];
        for (var v = 0; v < f.length; v++) {
            if (f[v]) {
                if (a(f[v][0], f[v][1], t, e) < a(m[0], m[1], t, e)) {
                    m = f[v]
                }
            }
        }
        for (var _ = 0; _ < f.length; _++) {
            if (f[_]) {
                if (a(f[_][0], f[_][1], n, r) < a(g[0], g[1], n, r)) {
                    g = f[_]
                }
            }
        }
        if (m[0] === n && m[1] === r || g[0] === t && g[1] === e) return null;
        else return [m, g]
    }
    var m = function(t) {
        return Math.sqrt(t[0] * t[0] + t[1] * t[1])
    };
    var g = 1e-6;
    var v = function(t, e, n) {
        var r = [e[0] - t[0], e[1] - t[1]],
            i = m(r);
        if (i < g) return t;
        var o = [n[0] - t[0], n[1] - t[1]];
        var a = (r[0] * o[0] + r[1] * o[1]) / i;
        if (a < 0) return t;
        if (a > i) return e;
        return [t[0] + r[0] * a / i, t[1] + r[1] * a / i]
    };
    if (typeof exports != "undefined") {
        exports.erase = t
    }
    return t
}();
gm_hwr_request = function() {
    var t = function(t) {
        var e = {
            type: "stroke",
            x: [],
            y: []
        };
        t.points.forEach(function(t) {
            e.x.push(t[0]);
            e.y.push(t[1])
        });
        return e
    };
    var e = function(e, n) {
        url = "http://dlandy.psych.indiana.edu:7031/server.js";
        var r = {
            components: e.map(t),
            resultTypes: ["LATEX"]
        };
        var i = {
            apiKey: "c26d2755-1fda-4033-b136-4af042f3f9db",
            equationInput: JSON.stringify(r)
        };
        var o = $.post(url, i.equationInput);
        o.done(function(t) {
            var e = t.replace(/\\/g, "\\\\");
            e = JSON.parse(e);
            n(null, e.JSON)
        })
    };
    return e
}();
gmath.ui = gmath.ui || {};
gmath.ui.holdUI = function() {
    var t = function(t, e, n) {
        this.container = t;
        this.controller = e;
        this.view = n;
        this.element = null;
        this.pos = [0, 0];
        this.visible = false;
        this.buttons = [];
        this.button_els = null;
        this.colors = d3.scale.category10();
        this.button_rads = null;
        this.inner_radius = 20;
        this.outer_radius = 80;
        this.init()
    };
    t.prototype.setPos = function(t) {
        this.pos = t;
        this.element.attr("transform", "translate(" + t[0] + "," + t[1] + ")")
    };
    t.prototype.setVisible = function(t) {
        this.visible = t;
        this.element.style("display", t ? null : "none")
    };
    t.prototype.init = function() {
        var t = this,
            e = {
                stroke: "black",
                "stroke-width": 1,
                "stroke-linecap": "round",
                fill: "none"
            };
        this.buttons.push({
            action: function(e) {
                t.controller.inputDL(e)
            },
            icon: function(t) {
                var e = t.append("g").attr("transform", "translate(0,10)").append("g");
                var n = new gmath.AlgebraModel("f_x", {});
                var r = new gmath.AlgebraView(n, e, {
                    font_size: "35",
                    inactive_color: "black",
                    interactive: false
                });
                r.init();
                return e
            },
            color: t.colors(0)
        });
        this.buttons.push({
            action: function(e) {
                var n = {
                    pos: {
                        x: e[0],
                        y: e[1]
                    }
                };
                t.view.createGraph(n)
            },
            icon: function(t) {
                var n = t.append("g").attr("transform", "translate(2,0)").style("cursor", "pointer");
                var r = n.append("g").style("opacity", .5).style("shape-rendering", "crispedges");
                r.append("line").attr({
                    x1: -15,
                    y1: 0,
                    x2: 15,
                    y2: 0
                }).style(e);
                r.append("line").attr({
                    x1: 0,
                    y1: -15,
                    x2: 0,
                    y2: 15
                }).style(e);
                r.append("rect").attr({
                    x: -15,
                    y: -15,
                    width: 30,
                    height: 30
                }).style(e);
                n.append("line").attr({
                    x1: -15,
                    y1: 8,
                    x2: 15,
                    y2: -8
                }).style(e).style("stroke-width", 1.5);
                return n
            },
            color: t.colors(1)
        });
        this.buttons.push({
            action: function(e) {
                var n = {
                    pos: {
                        x: e[0],
                        y: e[1]
                    }
                };
                t.view.createTextBox(n)
            },
            icon: function(t) {
                var n = t.append("g");
                var r = n.append("g").style("opacity", .5);
                r.append("text").text("Aa").attr({
                    x: 0,
                    y: 10
                }).style("text-anchor", "middle").style("font-size", "30px").style(e).style("fill", "black").style("pointer-events", "none");
                return n
            },
            color: t.colors(2)
        });
        this.button_rads = Math.PI * 2 / this.buttons.length;
        var n = this.button_rads,
            r = this.inner_radius,
            i = this.outer_radius;
        this.element = this.container.append("g").style("display", "none");
        var o = this.element.append("defs"),
            a = o.append("filter").attr("id", "dropShadow_holdUI");
        a.append("feGaussianBlur").attr("in", "SourceAlpha").attr("stdDeviation", 3);
        a.append("feOffset").attr("dx", 0).attr("dy", 4).attr("result", "offsetblur");
        a.append("feComponentTransfer").append("feFuncA").attr("type", "linear").attr("slope", .25);
        var s = a.append("feMerge");
        s.append("feMergeNode");
        s.append("feMergeNode").attr("in", "SourceGraphic");
        this.element.attr("filter", "url(#dropShadow_holdUI)");
        this.button_els = this.element.selectAll(".holdUI").data(this.buttons);
        this.button_els.enter().append("g").classed("holdUI", true).append("path").attr("d", function(t, e) {
            var o = Math.cos(n * e) * r,
                a = -Math.sin(n * e) * r,
                s = Math.cos(n * e) * i,
                l = -Math.sin(n * e) * i,
                p = Math.cos(n * (e + 1)) * i,
                h = -Math.sin(n * (e + 1)) * i,
                u = Math.cos(n * (e + 1)) * r,
                c = -Math.sin(n * (e + 1)) * r;
            return "M" + o + "," + a + "L" + s + "," + l + "A" + i + "," + i + " 0 0,0 " + p + "," + h + "L" + u + "," + c + "A" + r + "," + r + " 0 0,1 " + o + "," + a + "Z"
        }).style("fill", function(t) {
            return t.color
        }).style("opacity", .8).style("cursor", "pointer");
        this.button_els.each(function(t, e) {
            var o = d3.select(this),
                a = t.icon(o);
            a.attr("transform", function() {
                var t = Math.cos(n * (e + .5)) * (r + (i - r) / 2),
                    o = -Math.sin(n * (e + .5)) * (r + (i - r) / 2);
                return "translate(" + t + ", " + o + ")"
            })
        })
    };
    t.prototype.detectHit = function(t) {
        var e = this,
            n = this.button_rads,
            r = this.inner_radius,
            i = this.outer_radius,
            o = -1;
        this.button_els.each(function(a, s) {
            var l = Math.sqrt(Math.pow(t[0] - e.pos[0], 2) + Math.pow(t[1] - e.pos[1], 2)),
                p = Math.atan2(-t[1] + e.pos[1], t[0] - e.pos[0]);
            if (p < 0) p += Math.PI * 2;
            if (l > r && l < i && p > n * s && p < n * (s + 1)) o = s
        });
        return o
    };
    t.prototype.highlight = function(t) {
        var e = this.detectHit(t);
        this.button_els.each(function(t, n) {
            var r = d3.select(this).select("path");
            if (e === n) r.transition().duration(30).style("fill", d3.rgb(t.color).brighter(.6));
            else r.transition().duration(30).style("fill", t.color)
        })
    };
    t.prototype.performAction = function(t) {
        var e = this.detectHit(t);
        this.button_els.each(function(n, r) {
            if (r === e) n.action(t)
        })
    };
    return t
}();
gmath.ui = gmath.ui || {};
gmath.ui.CanvasController = function() {
    var t = function(t) {
        var e = d3.dispatch("scroll", "start_hwr", "stop_hwr", "undone", "redone", "hold", "touch", "drag", "release", "font_size", "keyboard", "entered_term", "start-of-interaction", "end-of-interaction");
        var n = gmath.uid(),
            r = t,
            i = null,
            o = [],
            a = -1,
            s = null,
            l = false,
            p = null,
            h = false,
            u = true,
            c, d = 1500,
            f = null,
            y = r.paths().length,
            m = 2,
            g = 50,
            v = null,
            _ = "black",
            b = null,
            w = null,
            x = 0,
            k = null,
            E = null,
            T = false,
            C = null,
            D = false,
            M = true,
            A = true;
        var z = function() {
            t.on("create." + n, function(t) {
                if (t.target_type === "dl" || t.target_type === "graph" || t.target_type === "textbox" || t.target_type === "image") {
                    t.target.events.on("start-of-interaction." + n, function(t) {
                        S();
                        e["start-of-interaction"](t)
                    });
                    t.target.events.on("end-of-interaction." + n, function(t) {
                        e["end-of-interaction"](t)
                    })
                }
            });
            if (A && !C && r.container()) {
                C = new gmath.ui.holdUI(r.container(), z, r)
            }
            W(t.container().select("#background_event_layer"), N());
            W(t.container().select("#foreground_event_layer"), H());
            t.on("mode." + n, function(t) {
                S();
                if (t.mode === "draw" || t.mode === "erase") {
                    r.display_foreground_event_layer(true);
                    r.setActive(null)
                } else {
                    r.display_foreground_event_layer(false)
                }
            });
            if (M && typeof gmath.ui.Keyboard !== "undefined" && typeof $ !== "undefined") {
                p = gmath.ui.Keyboard();
                p.width(800).position("center").on("done", Q).on("cancel", tt)()
            }
            r.container().on("dragover", function() {
                d3.event.preventDefault()
            }).on("drop", et);
            return this
        };

        function S() {
            window.getSelection().removeAllRanges()
        }
        z.id = n;
        z.reporter = function(t) {
            i = t;
            i.events.on("summary", this.addInteractionSummaryToTimeline.bind(this))
        };
        z.model = function() {
            if (arguments.length === 0) return r
        };
        z.use_keyboard = function(t) {
            if (arguments.length === 0) return M;
            M = t;
            return this
        };
        z.use_hold_menu = function(t) {
            if (arguments.length === 0) return A;
            A = t;
            if (A && !C && r.container()) {
                C = new gmath.ui.holdUI(r.container(), z, r)
            }
            return this
        };
        z.color = function(t) {
            if (arguments.length === 0) return _;
            _ = t;
            return this
        };
        z.markerRadius = function(t) {
            if (arguments.length === 0) return m;
            m = t;
            return this
        };
        z.eraserRadius = function(t) {
            if (arguments.length === 0) return g;
            g = t;
            return this
        };
        z.hwr_delay = function(t) {
            if (arguments.length === 0) return d;
            d = t;
            return this
        };
        z.tx_behavior = function() {
            return w
        };
        z.hwr = function(t) {
            if (!arguments.length) return u;
            if (u === t) return z;
            u = t;
            y = r.paths.length;
            if (!u) z.cancelHWR();
            return z
        };
        z.drawing = function(t) {
            if (!arguments.length) return c;
            c = t;
            return this
        };
        z.scheduleHWR = function() {
            if (!f) {
                f = setTimeout(z.performHWR, d);
                e.start_hwr()
            }
        };
        z.cancelHWR = function(t) {
            if (!t) y = r.paths.length;
            if (f) {
                clearTimeout(f);
                f = null;
                e.stop_hwr()
            }
        };
        z.performHWR = function() {
            f = null;
            e.stop_hwr();
            if (y > r.paths().length - 1) return;
            var t = r.paths().slice(y),
                n = false,
                i = [];
            gm_hwr_request(t, function(e, o) {
                if (e) console.log(e);
                var a = t[0].points[0];
                try {
                    n = r.createDL({
                        pos: a,
                        eq: o
                    })
                } catch (s) {
                    return
                }
                var l = function(t) {
                    try {
                        r.removePath(t);
                        i.push(t)
                    } catch (e) {
                        return
                    }
                };
                for (var p = 0; p < t.length; p++) {
                    l(t[p])
                }
                y = r.paths().length
            });
            y = r.paths().length
        };
        z.scroll = function(t) {
            if (arguments.length === 0) return x;
            x = Math.min(0, t);
            w.transform({
                translate: [0, x]
            });
            r.paths_container().attr("transform", "translate(0," + x + ")");
            r.dls_container().attr("transform", "translate(0," + x + ")");
            e.scroll(x);
            return this
        };
        z.font_smaller = function() {
            var t = parseInt(DerivationList.defaultOptions.font_size);
            if (t / 1.2 > 12) this.set_font_size(t / 1.2)
        };
        z.font_larger = function() {
            var t = parseInt(DerivationList.defaultOptions.font_size);
            if (t * 1.2 < 160) this.set_font_size(t * 1.2)
        };
        z.set_font_size = function(t) {
            DerivationList.defaultOptions.font_size = t;
            r.dls().forEach(function(e) {
                e.options.font_size = t;
                e.rows.forEach(function(e) {
                    e.view.options.font_size = t;
                    e.view.update_all(true);
                    e.updateHandlePos(true)
                });
                e.hideAllNodeMappings();
                e.layoutRows()
            });
            e.font_size(new B(t))
        };
        var L = function(t) {
            return r.createPath({
                points: [
                    [t[0], t[1] - x]
                ],
                color: r.setMode() === "draw" ? _ : "white",
                width: r.setMode() === "draw" ? 2 * m : 2 * g
            })
        };
        var q = function(t) {
            this.type = "hold";
            this.subType = t.subType;
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.finger = {
                pos: [t.finger.pos[0], t.finger.pos[1]]
            };
            this.fingers = t.fingers.map(function(t) {
                return {
                    pos: [t.pos[0], t.pos[1]]
                }
            })
        };
        var I = function(t) {
            this.type = "touch";
            this.subType = t.subType;
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.finger = {
                pos: [t.finger.pos[0], t.finger.pos[1]],
                pos0: [t.finger.pos0[0], t.finger.pos0[1]]
            };
            this.fingers = t.fingers.map(function(t) {
                return {
                    pos: [t.pos[0], t.pos[1]]
                }
            })
        };
        var P = function(t) {
            this.type = "drag";
            this.subType = t.subType;
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.finger = {
                pos: [t.finger.pos[0], t.finger.pos[1]]
            };
            this.fingers = t.fingers.map(function(t) {
                return {
                    pos: [t.pos[0], t.pos[1]]
                }
            })
        };
        var F = function(t) {
            this.type = "release";
            this.subType = t.subType;
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.finger = {
                pos: [t.finger.pos[0], t.finger.pos[1]]
            };
            this.fingers = t.fingers.map(function(t) {
                return {
                    pos: [t.pos[0], t.pos[1]]
                }
            })
        };
        var B = function(t) {
            this.type = "fontSize";
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.font_size = t
        };
        var O = function(t) {
            this.type = "enteredTerm";
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.eq = t.eq;
            this.dl_id = t.id;
            this.options = gmath.deepCopy(t)
        };
        var R = function(t) {
            this.type = "enteredGraph";
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now();
            this.graph_id = t
        };
        var j = function() {
            this.type = "keyboard";
            this.performee = n;
            this.performee_type = "CanvasController";
            this.time = Date.now()
        };

        function W(t, e) {
            t.call(e);
            e.frame(t.node())
        }

        function N() {
            var t = transform_behavior().allow_rotate(false).allow_scale(false).one_finger_drag(false).on("transform", function() {
                scroll(d3.event.transform.translate[1])
            });
            var e = mtouch_events().on("touch", G.bind(this, null)).on("hold", V.bind(this, null)).on("drag", U.bind(this, null)).on("tap", function() {
                r.setActive(null)
            }).on("release", K.bind(this, null)).hold_max_dist(5).hold_time(500).call(t);
            return e
        }

        function H() {
            var t = transform_behavior().allow_rotate(false).allow_scale(false).one_finger_drag(false).on("transform", function() {
                scroll(d3.event.transform.translate[1])
            });
            var e = mtouch_events().on("touch", J.bind(this, null)).on("drag", Z.bind(this, null)).on("release", X.bind(this, null)).hold_max_dist(5).hold_time(500).call(t);
            return e
        }
        var G = function(t) {
            if (!A || T) return;
            var r = t || d3.event;
            if (!t && d3.event) {
                S();
                e["start-of-interaction"]({
                    type: "start-of-interaction",
                    source: {
                        type: "CanvasController",
                        id: n
                    },
                    time: Date.now()
                });
                e.touch(new I(gmath.extend(d3.event, {
                    subType: "menu"
                })))
            }
            if (r.fingers.length > 1) {
                T = true
            }
        };
        z.menu_touch = G;
        var V = function(t) {
            if (!A || T || M && p.visible()) return;
            var n = t || d3.event;
            if (!t && d3.event) {
                e.hold(new q(gmath.extend(d3.event, {
                    subType: "menu"
                })))
            }
            C.setPos(n.finger.pos.slice());
            C.setVisible(true)
        };
        z.menu_hold = V;
        var U = function(t) {
            if (!A || T) return;
            var n = t || d3.event;
            if (!t && d3.event) {
                e.drag(new P(gmath.extend(d3.event, {
                    subType: "menu"
                })))
            }
            if (C.visible) {
                C.highlight(n.finger.pos.slice())
            }
        };
        z.menu_drag = U;
        var K = function(t) {
            var r = t || d3.event;
            if (!t && d3.event) {
                e.release(new F(gmath.extend(d3.event, {
                    subType: "menu"
                })))
            }
            if (T) {
                if (r.fingers.length === 0) T = false;
                return
            }
            if (C && C.visible) {
                C.performAction(r.finger.pos.slice());
                C.setVisible(false)
            }
            if (!t && d3.event && !p.visible()) {
                e["end-of-interaction"]({
                    type: "end-of-interaction",
                    source: {
                        type: "CanvasController",
                        id: n
                    },
                    time: Date.now()
                })
            }
        };
        z.menu_release = K;
        var J = function(t) {
            var i = t || d3.event;
            if (!t && d3.event) {
                e["start-of-interaction"]({
                    type: "start-of-interaction",
                    source: {
                        type: "CanvasController",
                        id: n
                    },
                    time: Date.now()
                });
                e.touch(new I(gmath.extend(d3.event, {
                    subType: "draw"
                })))
            }
            if (i.fingers.length > 1) {
                T = true
            }
            if (!c || T) return;
            var o = i.finger.pos0.slice();
            o[1] -= x;
            z.cancelHWR(true);
            k = L(i.finger.pos0);
            if (r.setMode() === "erase") {
                v = r.paths_container().append("circle").attr({
                    cx: o[0],
                    cy: o[1],
                    r: g
                }).style({
                    stroke: "silver",
                    fill: "white"
                })
            }
        };
        z.draw_touch = J;
        var Z = function(t) {
            var n = t || d3.event;
            if (!t && d3.event) {
                e.drag(new P(gmath.extend(d3.event, {
                    subType: "draw"
                })))
            }
            if (!k || T || !c) return;
            var i = n.finger.pos.slice();
            i[1] -= x;
            k.points.push(i);
            r.updatePath(k);
            if (r.setMode() === "erase") v.attr({
                cx: i[0],
                cy: i[1]
            })
        };
        z.draw_drag = Z;
        var X = function(t) {
            var i = t || d3.event;
            if (!t && d3.event) {
                e.release(new F(gmath.extend(d3.event, {
                    subType: "draw"
                })))
            }
            if (T) {
                if (i.fingers.length === 0) T = false;
                return
            }
            if (!k) return;
            if (r.setMode() === "draw") {
                if (u && (!p || !p.visible())) z.scheduleHWR()
            } else if (r.setMode() === "erase") {
                v.remove();
                Y()
            }
            k = null;
            if (!t && d3.event) {
                e["end-of-interaction"]({
                    type: "end-of-interaction",
                    source: {
                        type: "CanvasController",
                        id: n
                    },
                    time: Date.now()
                })
            }
        };
        z.draw_release = X;
        var Y = function() {
            var t = r.paths().slice(),
                e = t[t.length - 1],
                n = [],
                i = [],
                o = [];
            t.forEach(function(t, a) {
                if (t === e) return;
                var s = g + t.width / 2;
                var l = gm_erase_paths([t.points], e.points, s);
                if (l.length === 0) {
                    i.push(t);
                    r.removePath(t)
                } else {
                    o.push({
                        path: t,
                        points_before: t.points.slice(),
                        points_after: l[0].slice()
                    });
                    t.points = l[0];
                    r.updatePath(t);
                    for (var p = 1; p < l.length; p++) {
                        var h = r.createPath({
                            points: l[p],
                            color: t.color,
                            width: t.width,
                            oid: t.id
                        });
                        n.push(h)
                    }
                }
            });
            r.removePath(e);
            eraseModification = {
                removed: i,
                modified: o,
                added: n
            }
        };
        z.addInteractionSummaryToTimeline = function(t) {
            var e = Timeline.entry(t, r);
            if (e) {
                if (e.type === "erase") {
                    e.modification = eraseModification;
                    eraseModification = null
                }
                a++;
                o[a] = e;
                o.length = a + 1
            }
        };
        z.undo = function() {
            if (a === -1) return false;
            i.setListening(false);
            var t = o[a];
            a--;
            t.undo(r, this);
            i.setListening(true);
            return true
        };
        z.redo = function() {
            if (o.length <= a + 1) return false;
            i.setListening(false);
            a++;
            var t = o[a];
            t.redo(r, this);
            i.setListening(true);
            return true
        };
        z.clearInteractionTimeline = function() {
            a = -1;
            o = []
        };
        z.clear_undo_queue = function() {
            throw "(CanvasController) Deprecated method `clear_undo_queue` called."
        };
        z.inputDL = function(t) {
            if (h) return;
            e.keyboard(new j);
            z.cancelHWR(true);
            E = {
                pos: {
                    x: t[0],
                    y: t[1] - x
                },
                v_align: "center",
                h_align: "equals"
            };
            p.caption(null).latex("").visible(true)
        };
        var Q = function(t) {
            if (!E) return;
            if (t === "") {
                p.visible(false);
                return
            }
            E.eq = t;
            E.id = gmath.uid();
            e.entered_term(new O(E));
            var i;
            var o = false;
            try {
                i = r.createDL(E);
                E = null
            } catch (a) {
                console.log(a);
                p.warning("Could not parse expression.");
                return
            }
            p.visible(false);
            e["end-of-interaction"]({
                type: "end-of-interaction",
                source: {
                    type: "CanvasController",
                    id: n
                },
                time: Date.now()
            })
        };
        var tt = function() {
            p.visible(false);
            e["end-of-interaction"]({
                type: "end-of-interaction",
                source: {
                    type: "CanvasController",
                    id: n
                },
                time: Date.now()
            })
        };
        z.disableKeyboard = function(t) {
            h = t
        };
        z.simulateStartOfInteraction = function() {
            e["start-of-interaction"]({
                type: "start-of-interaction",
                source: {
                    type: "CanvasController",
                    id: n
                },
                time: Date.now()
            })
        };
        z.simulateEndOfInteraction = function() {
            e["end-of-interaction"]({
                type: "end-of-interaction",
                source: {
                    type: "CanvasController",
                    id: n
                },
                time: Date.now()
            })
        };

        function et() {
            var t = d3.event;
            t.preventDefault();
            var i = d3.mouse(this);
            var o = nt(t.dataTransfer) || rt(t.dataTransfer);
            if (!o) {
                console.log("could not parse drop data", t);
                var a = {
                    drop_evt: t,
                    pos: {
                        x: i[0],
                        y: i[1]
                    }
                };
                var s = r.createImage(a, "drag-n-drop");
                return
            }
            if (o.slice(0, 4) === "http") {
                var a = {
                    drop_evt: t,
                    pos: {
                        x: i[0],
                        y: i[1]
                    }
                };
                var s = r.createImage(a, "drag-n-drop")
            } else {
                o = o.replace(/\\end{alignat}/g, "");
                o = o.replace(/\&\\\,/g, "");
                o = o.replace(/\\\,/g, "");
                o = o.replace(/\&/g, "");
                o = o.replace(/\\begin{alignat}{[0-9]*}/g, "");
                o = o.replace(/\\\;/g, "");
                o = o.replace(/[.,\s\\]+$/, "");
                var l = o.split("\\\\");
                if (o.length === 0) return;
                try {
                    e["start-of-interaction"]({
                        type: "start-of-interaction",
                        source: {
                            type: "CanvasController",
                            id: n
                        },
                        time: Date.now()
                    });
                    r.createDLs(l, {
                        pos: i,
                        collapsed_mode: l.length > 1
                    }, null, "drag-n-drop");
                    e["end-of-interaction"]({
                        type: "end-of-interaction",
                        source: {
                            type: "CanvasController",
                            id: n
                        },
                        time: Date.now()
                    })
                } catch (p) {
                    console.log("Could not parse equation!", p);
                    var a = {
                        drop_evt: t,
                        pos: {
                            x: i[0],
                            y: i[1]
                        }
                    };
                    var s = r.createImage(a, "drag-n-drop")
                }
            }
        }

        function nt(t) {
            var e = t.getData("text/html");
            var n = document.createElement("div");
            var r = d3.select(n).html(e).select("img");
            return r.size() === 1 ? r.attr("alt") : null
        }

        function rt(t) {
            return t.getData("text/plain")
        }
        return d3.rebind(z, e, "on")
    };
    return t
}();
gmath.ui = gmath.ui || {};
gmath.ui.CanvasModelView = function() {
    var t = function() {
        var t = d3.dispatch("create", "update", "remove", "reset", "mode"),
            e = null,
            n = [],
            r = [],
            i = [],
            o = [],
            a = [],
            s = [],
            l = [],
            p, h, u, c, d, f, y, m = ["edit", "inspect", "arrange", "draw", "erase"],
            g = 0;

        function v(t) {
            t.dl.draw_mappings_for_nodes([t.node])
        }

        function _(t) {
            return;
            var e = i.indexOf(t);
            if (e === -1 || e === i.length - 1) return;
            i.splice(i.indexOf(t), 1);
            i.push(t);
            var n = p.selectAll(".derivation-list").data(i, function(t) {
                return t.id
            });
            n.order()
        }
        var b = function(t) {
            e = t;
            h = e.append("g").attr("id", "g_paths");
            f = e.append("rect").attr("id", "background_event_layer").style({
                fill: "none",
                "pointer-events": "all"
            }).attr("width", "100%").attr("height", "100%");
            u = e.append("g").attr("id", "g_graphs");
            g_imgs = e.append("g").attr("id", "g_imgs");
            c = e.append("g").attr("id", "g_textboxes");
            p = e.append("g").attr("id", "g_dls");
            y = e.append("rect").attr("id", "foreground_event_layer").style({
                fill: "none",
                "pointer-events": "all",
                display: "none"
            }).attr("width", "100%").attr("height", "100%");
            return this
        };
        b.setActive = function(t, e) {
            if (arguments.length < 2) e = true;
            if (t) t.setActive(e);
            n.forEach(function(e) {
                if (e !== t) e.setActive(false)
            })
        };
        b.createDL = function(e, r, o) {
            var a = new DerivationList(b, p.node(), e, r);
            a.setMode(m[g]);
            a.events.on("inspect_node", v);
            n.push(a);
            i.push(a);
            d3.selectAll(".derivation-list").data(i);
            a.events.on("hover", _);
            var s = {
                type: "create",
                target_type: "dl",
                target: a
            };
            if (o) s.method = o;
            t.create(s);
            return a
        };

        function w(t) {
            if (t === "image") return gmath.ui.CanvasImage;
            if (t === "textbox") return gmath.ui.CanvasTextBox;
            if (t === "graph") return gmath.ui.Graph;
            if (t === "derivation") return gmath.DerivationList;
            if (t === "ggb-panel") return gmath.ui.GeoGebraPanel;
            throw 'unkown element type "' + t + '"'
        }
        b.getContainer = function(t) {
            if (t === "image") return g_imgs;
            if (t === "textbox") return c;
            if (t === "graph") return u;
            if (t === "derivation") return p;
            if (t === "ggb-panel") return u;
            throw 'unkown element type "' + t + '"'
        };
        b.createElement = function(e, r, i) {
            var o = b.getContainer(e);
            var a = w(e);
            var s = new a(b, o.node(), r);
            n.push(s);
            t.create({
                type: "create",
                target_type: e,
                target: s,
                method: i
            });
            return s
        };
        b.createImage = function(e, r) {
            var i = new gmath.ui.CanvasImage(b, g_imgs.node(), e);
            n.push(i);
            a.push(i);
            t.create({
                type: "create",
                target_type: "image",
                target: i,
                method: r
            });
            return i
        };
        b.createTextBox = function(e, r, i) {
            var o = new gmath.ui.TextBox(b, c.node(), e, r);
            n.push(o);
            s.push(o);
            t.create({
                type: "create",
                target_type: "textbox",
                target: o,
                method: i
            });
            return o
        };
        b.removeDL = function(e) {
            x(n, e);
            x(i, e);
            var r = gmath.LinkCoordinator.unlinkDL(e);
            l.push(e);
            e.removeElement();
            t.remove({
                type: "remove",
                target_type: "dl",
                target: e
            });
            return r
        };
        b.removeImage = function(e) {
            x(n, e);
            x(a, e);
            e.removeElement();
            l.push(e);
            t.remove({
                type: "remove",
                target_type: "image",
                target: e
            })
        };
        b.removeTextBox = function(e) {
            x(n, e);
            x(s, e);
            e.removeElement();
            l.push(e);
            t.remove({
                type: "remove",
                target_type: "textbox",
                target: e
            })
        };
        b.addElement = function(e, r) {
            if (e in n) throw "element is already part of this canvas";
            x(l, e);
            e.canvas_model = b;
            e.initElement(b.getContainer(e.type));
            e.setMode(m[g]);
            n.push(e);
            t.create({
                type: "create",
                target_type: e.type,
                target: e,
                method: r
            });
            return b
        };
        b.addDL = function(e) {
            x(l, e);
            if (i.indexOf(e) !== -1) throw "dl is already in this model";
            e.canvas_model = b;
            e.initElement(p.node());
            e.setMode(m[g]);
            e.events.on("inspect_node", v);
            b.setActive(e);
            n.push(e);
            i.push(e);
            d3.selectAll(".derivation-list").data(i);
            e.events.on("hover", _);
            t.create({
                type: "create",
                target_type: "dl",
                target: e
            });
            return e
        };
        b.addImage = function(e) {
            x(l, e);
            e.canvas_model = b;
            e.initElement(g_imgs.node());
            e.setMode(m[g]);
            n.push(e);
            a.push(e);
            t.create({
                type: "create",
                target_type: "image",
                target: e
            })
        };
        b.addTextBox = function(e) {
            x(l, image);
            e.canvas_model = b;
            e.initElement(c.node());
            e.setMode(m[g]);
            n.push(e);
            s.push(e);
            t.create({
                type: "create",
                target_type: "textbox",
                target: e
            });
            return e
        };
        b.createDLs = function(t, e, n, r) {
            var i = 0;
            o();

            function o(a) {
                if (i === t.length) {
                    if (n) n()
                } else {
                    if (a) e.pos[1] += a.dims.height;
                    var s = gmath.deepCopy(e);
                    s.eq = t[i++];
                    b.createDL(s, o, r)
                }
            }
        };
        b.isInFreeVisibleSpace = function(t, e) {
            var n = this.viewport();
            if (t.y < n.y || t.y + t.height > n.y + n.height) return false;
            return !this.dls().some(function(n) {
                if (e && e.indexOf(n) !== -1) return false;
                var r = n.getBBox();
                return gmath.HitTester.overlaps(t, r)
            })
        };
        b.createPath = function(e, n) {
            var i = new gmath.ui.Path(h.node(), e);
            r.push(i);
            var o = {
                type: "create",
                target_type: "path",
                target: i
            };
            if (n) o.method = n;
            t.create(o);
            return i
        };
        b.removePath = function(e) {
            x(r, e);
            e.remove();
            t.remove({
                type: "remove",
                target_type: "path",
                target: e
            })
        };
        b.addPath = function(e) {
            if (r.indexOf(e) !== -1) throw "path is already in this model";
            e.setContainer(h);
            e.init();
            r.push(e);
            t.create({
                type: "create",
                target_type: "path",
                target: e
            });
            return e
        };
        b.updatePath = function(e) {
            e.update();
            t.update({
                target_type: "path",
                target: e
            })
        };
        b.createGraph = function(e) {
            e.view = b;
            var n = new gmath.ui.Graph(u.node(), e);
            o.push(n);
            t.create({
                type: "create",
                target_type: "graph",
                target: n
            });
            return n
        };
        b.removeGraph = function(e) {
            x(o, e);
            e.remove();
            t.remove({
                type: "remove",
                target_type: "graph",
                target: e
            })
        };
        b.removeCanvasElement = function(t) {
            if (!t.type) return;
            switch (t.type) {
                case "TextBox":
                    b.removeTextBox(t);
                    break;
                case "CanvasImage":
                    b.removeImage(t);
                    break;
                case "DerivationList":
                    b.removeDL(t);
                    break
            }
        };
        b.addCanvasElement = function(t) {
            if (!t.type) return;
            switch (t.type) {
                case "TextBox":
                    b.addTextBox(t);
                    break;
                case "CanvasImage":
                    b.addImage(t);
                    break;
                case "DerivationList":
                    b.addDL(t)
            }
        };
        var x = function(t, e) {
            if (t.length === 0) return false;
            var n = t.indexOf(e);
            if (n === -1) return false;
            t.splice(n, 1);
            return true
        };
        b.elements = function() {
            return n
        };
        b.dls = function(e) {
            if (!arguments.length) return i;
            for (var n = 0; n < i.length; n++) i[n].remove();
            i = e.slice();
            for (var n = 0; n < i.length; n++) {
                i[n].container(p);
                i[n].init()
            }
            t.reset({
                target_type: "dl",
                target: i.slice()
            })
        };
        b.graphs = function() {
            return o
        };
        b.graphs = function(t) {
            if (!arguments.length) return o
        };
        b.textboxes = function() {
            return s
        };
        b.images = function() {
            return a
        };
        b.getElementsOfType = function(t) {
            if (t === "graph") return o;
            if (t === "dl") return i;
            if (t === "textboxes") return s;
            if (t === "image") return a
        };
        b.getElementByID = function(t) {
            for (var e = 0; e < i.length; e++) {
                if (i[e].id === t) return i[e]
            }
            for (var e = 0; e < r.length; e++) {
                if (r[e].id === t) return r[e]
            }
            for (var e = 0; e < s.length; e++) {
                if (s[e].id === t) return s[e]
            }
            for (var e = 0; e < a.length; e++) {
                if (a[e].id === t) return a[e]
            }
            return null
        };
        b.getDeletedElementByID = function(t) {
            for (var e = 0; e < l.length; e++) {
                if (l[e].id === t) return l[e]
            }
            return null
        };
        b.paths = function(e) {
            if (!arguments.length) return r;
            for (var n = 0; n < r.length; n++) r[n].remove();
            r = e.slice();
            for (var n = 0; n < r.length; n++) {
                r[n].setContainer(h);
                r[n].init()
            }
            t.reset({
                target_type: "path",
                target: r.slice()
            })
        };
        b.container = function() {
            return e
        };
        b.background_event_layer = function(t) {
            if (!arguments.length) return f;
            f = t;
            return this
        };
        b.foreground_event_layer = function(t) {
            if (!arguments.length) return y;
            y = t;
            return this
        };
        b.display_foreground_event_layer = function(t) {
            if (!arguments.length || t) y.style({
                display: "inline"
            });
            else y.style({
                display: "none"
            })
        };
        b.dls_container = function(t) {
            if (!arguments.length) return p;
            p = t;
            return this
        };
        b.paths_container = function(t) {
            if (!arguments.length) return h;
            h = t;
            return this
        };
        b.graphs_container = function(t) {
            if (!arguments.length) return u;
            u = t;
            return this
        };
        b.textboxes_container = function(t) {
            if (!arguments.length) return c;
            c = t;
            return this
        };
        b.size = function() {
            var t = e.node();
            while (t.tagName.toLowerCase() !== "svg" && t.parentNode) t = t.parentNode;
            var n = t.getBoundingClientRect();
            return {
                width: n.width,
                height: n.height
            }
        };
        b.viewport = function() {
            var t = e.node();
            while (t.tagName.toLowerCase() !== "div" && t.parentNode) t = t.parentNode;
            return {
                x: 0,
                width: t.clientWidth,
                y: t.scrollTop,
                height: t.clientHeight
            }
        };
        b.setMode = function(e) {
            if (arguments.length === 0) return m[g];
            g = m.indexOf(e);
            n.forEach(function(t) {
                t.setMode(e)
            });
            t.mode({
                type: "mode",
                mode: e
            });
            return this
        };
        return d3.rebind(b, t, "on")
    };
    return t
}();
gmath.ui = gmath.ui || {};
gmath.ui.CanvasFactory = function() {
    var t = function(e, n, r) {
        this.container = d3.select(e);
        n = n || {};
        this.options = gmath.object.merged(gmath.deepCopy(!n.minimal ? t.defaultOptions : t.minimalOptions), n);
        if (gmath.log_ga) gmath.log_ga.enabled(this.options.ga_tracking);
        this.options.toolbar_container = this.options.toolbar_container ? d3.select(this.options.toolbar_container) : this.container;
        this.events = d3.dispatch("button");
        this.model = gmath.ui.CanvasModelView();
        this.controller = gmath.ui.CanvasController(this.model).drawing(this.options.drawing).hwr(this.options.hwr).use_keyboard(this.options.use_keyboard).use_hold_menu(this.options.use_hold_menu);
        this.init();
        if (r && this.options.loads_url) {
            this.remove();
            gmath.CanvasSaver.loadSaveFile(this.container.node(), this.options.loads_url, r)
        }
        this.reporter = new CanvasEventReporter(this, this.options.reporter_options);
        this.controller.reporter(this.reporter)
    };
    gmath.ui.CanvasFactoryClass = t;
    t.prototype.serialize = function() {
        return JSON.stringify(this.model.dls().concat(this.model.graphs()))
    };
    t.prototype.init = function() {
        this.id = gmath.uid();
        var t = this;
        this.tools = this.options.toolbar_container.append("div").attr({
            "class": "btn-toolbar",
            role: "toolbar"
        }).style({
            width: this.options.width
        }).style(this.options.use_toolbar ? this.options.toolbar_on_style : this.options.toolbar_off_style);
        if (this.options.minimal) this.tools.on("mouseenter", function() {
            if (t.toolFadeoutTimer) clearTimeout(t.toolFadeoutTimer)
        }).on("mouseleave", this.switchToolbarState.bind(this));
        if (this.options.drawing) {
            this.options.mode_btns.splice(3, 0, {
                type: "radio",
                group: "draw",
                state: false,
                label: "draw",
                icon: "glyphicon glyphicon-pencil"
            }, {
                type: "radio",
                group: "draw",
                state: false,
                label: "erase",
                icon: "glyphicon glyphicon-erase"
            })
        }
        if (this.options.mode_btns) this.appendButtonGroup(this.options.mode_btns, this.onButton);
        if (this.options.reset_btn) this.appendButtonGroup([this.options.reset_btn], this.onButton);
        if (this.options.undo_btn || this.options.redo_btn) {
            var e = [];
            if (this.options.undo_btn) e.push(this.options.undo_btn);
            if (this.options.redo_btn) e.push(this.options.redo_btn);
            this.appendButtonGroup(e, this.onButton)
        }
        if (this.options.font_smaller_btn && this.options.font_larger_btn) {
            var n = [];
            n.push(this.options.font_smaller_btn);
            n.push(this.options.font_larger_btn);
            this.appendButtonGroup(n, this.onButton)
        }
        if (this.options.help_btn) {
            if (this.options.minimal) this.options.help_btn.pull_right = false;
            var r = [];
            r.push(this.options.help_btn);
            this.appendButtonGroup(r, this.onButton)
        }
        if (this.options.saving_and_loading) {
            if (this.options.save_btn && this.options.load_btn && this.options.share_btn) this.appendButtonGroup([this.options.save_btn, this.options.load_btn, this.options.share_btn], this.onButton);
            else if (this.options.save_btn && this.options.load_btn) this.appendButtonGroup([this.options.save_btn, this.options.load_btn], this.onButton)
        }
        if (this.options.feedback && this.options.feedback_btn) {
            this.appendButtonGroup([this.options.feedback_btn], this.onButton)
        }
        if (this.options.minimal) {
            this.tools.classed("btn-toolbar-minimal", true);
            var i = this.tools.append("div").attr("class", "btn-group pull-right").style({
                "line-height": "26px",
                "margin-left": "40px"
            });
            i.append("span").text("powered by").style({
                "font-style": "italic",
                "font-family": "sans-serif",
                color: "#909090",
                "font-weight": 300,
                "font-size": "13px"
            });
            var o = i.append("a").style({
                "text-decoration": "none"
            }).attr({
                href: "http://graspablemath.com",
                target: "_blank"
            });
            o.append("img").attr({
                alt: "GM",
                src: this.options.logo_src
            }).style({
                "vertical-align": "-0.3em",
                height: "1.7em",
                "margin-left": "0.8em",
                "margin-right": "0.2em",
                "font-size": "13px"
            })
        }
        var a = this.tools.node().getBoundingClientRect().height;
        if (a === 0 && this.options.use_toolbar) a = {
            xs: 46,
            sm: 64
        }[this.options.btn_size] || 72;
        this.div = this.options.toolbar_pos === "top" ? this.container.append("div") : this.container.insert("div", "div.btn-toolbar");
        this.div.attr("id", "canvas-outer-container").style("width", this.options.width).style("height", "calc(" + this.options.height + " - " + (a + 10) + "px)").style("overflow-y", this.options.vertical_scroll ? "scroll" : "hidden").style("position", "relative");
        this.svg = this.div.append("svg").attr("id", "canvas-inner-container").style("width", this.options.width).style("height", "calc(" + this.options.svg_height + " - " + (this.options.use_toolbar ? a + 10 : 0) + "px)");
        if (this.options.vertical_scroll) this.div.on("scroll", this.adjustCanvasSize.bind(this));
        this.svgg = this.svg.append("g");
        this.svgg.call(this.model).call(this.controller);
        if (this.options.minimal && this.options.static_toolbar) this.switchToolbarState(true)
    };
    t.prototype.adjustCanvasSize = function() {
        var t = this.tools.node().getBoundingClientRect().height;
        var e = this.div.style("height");
        e = parseInt(e.substring(0, e.length - 2));
        var n = this.svg.style("height");
        n = parseInt(n.substring(0, n.length - 2));
        var r = this.div.property("scrollTop");
        if (!this.scroll) this.scroll = r;
        if (r > this.scroll) {
            if (n - r < e) {
                this.options.svg_height = parseInt(this.options.svg_height.substring(0, this.options.svg_height.length - 1)) + 100 + "%";
                this.svg.style("height", "calc(" + this.options.svg_height + " - " + (t + 10) + "px)")
            }
        } else if (r < this.scroll) {
            if (this.options.svg_height !== "200%" && n - r > e && this.noObjectsHiddenBelowView(r)) {
                this.options.svg_height = parseInt(this.options.svg_height.substring(0, this.options.svg_height.length - 1)) - 100 + "%";
                this.svg.style("height", "calc(" + this.options.svg_height + " - " + (t + 10) + "px)")
            }
        }
        this.scroll = r
    };
    t.prototype.noObjectsHiddenBelowView = function(t) {
        var e = [];
        e = this.model.dls().concat(this.model.graphs()).concat(this.model.textboxes()).concat(this.model.paths());
        if (e.length === 0) return true;
        for (var n = 0; n < e.length; n++) {
            var r = e[n];
            if (r.pos) {
                if (Array.isArray(r.pos) && r.pos[1] > t) return false;
                else if (r.pos.y > t) return false
            } else if (r.points && r.points[0][1] > t) return false
        }
        return true
    };
    t.prototype.focusOnDL = function(t) {
        if (!this.options.minimal) return;
        var e = this;
        this.div.style("overflow", "visible");
        this.svg.style("overflow", "visible");
        this.reporter.events.on("summary", function(t) {
            var e = this.model.getElementByID(t[t.length - 1].element.id);
            e.initPosition()
        }.bind(this))
    };
    t.prototype.switchToolbarState = function(t, e) {
        if (!this.options.use_toolbar) return;
        var n = this;
        if (t) {
            n.turnOnToolbar()
        } else {
            if (e) n.turnOffToolbar();
            else {
                n.toolFadeoutTimer = setTimeout(function() {
                    n.turnOffToolbar()
                }, n.options.toolFadeoutDelay)
            }
        }
    };
    t.prototype.turnOnToolbar = function() {
        if (this.toolFadeoutTimer) {
            clearTimeout(this.toolFadeoutTimer);
            this.toolFadeoutTimer = null
        }
        this.tools.style(this.options.toolbar_on_style);
        this.toolbarOn = true
    };
    t.prototype.turnOffToolbar = function() {
        if (this.toolFadeoutTimer) {
            clearTimeout(this.toolFadeoutTimer);
            this.toolFadeoutTimer = null
        }
        this.tools.style(this.options.toolbar_off_style);
        this.toolbarOn = false
    };
    t.prototype.resize = function(t) {
        this.options.width = t.width;
        this.options.height = t.height;
        this.svg.style({
            width: this.options.width,
            height: this.options.height
        });
        this.div.style({
            width: this.options.width,
            height: this.options.height
        });
        this.tools.style({
            width: this.options.width
        })
    };
    t.prototype.onButton = function(t) {
        var e = {
            mode: this.model.setMode() === "inspect" ? "scrub" : this.model.setMode(),
            font_size: DerivationList.defaultOptions.font_size
        };
        this.updateButton(t);
        if (t.label === "reset") {
            if (this.reporter.containsPendingEvents(this.reporter.interactionSequence)) {
                this.reporter.submitCurrentSequence()
            }
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "reset", 1);
            while (this.controller.undo()) {}
        }
        if (t.label === "undo") {
            if (this.reporter.containsPendingEvents(this.reporter.interactionSequence)) {
                this.reporter.submitCurrentSequence()
            }
            this.controller.undo();
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "undo", 1)
        }
        if (t.label === "redo") {
            if (this.reporter.containsPendingEvents(this.reporter.interactionSequence)) {
                this.reporter.submitCurrentSequence()
            }
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "redo", 1);
            this.controller.redo()
        }
        if (t.label === "HWR") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "hwr", 1);
            this.controller.hwr(t.state)
        }
        if (t.label === "transform") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "transform", 1);
            this.model.setMode("edit")
        }
        if (t.label === "scrub") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "scrub", 1);
            this.model.setMode("inspect")
        }
        if (t.label === "arrange") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "arrange", 1);
            this.model.setMode("arrange")
        }
        if (t.label === "draw") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "draw", 1);
            this.model.setMode("draw")
        }
        if (t.label === "erase") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "erase", 1);
            this.model.setMode("erase")
        }
        if (t.label === "help") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "help", 1);
            this.help()
        }
        if (t.label === "feedback") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "feedback", 1);
            this.sendFeedback()
        }
        if (t.label === "fullscreen" && t.state === true) {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "start fullscreen", 1);
            this.launchFullScreen()
        }
        if (t.label === "fullscreen" && t.state === false) {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "stop fullscreen", 1);
            this.cancelFullScreen()
        }
        if (!(t.label === "HWR" && t.state === true) && this.options.hwr === true) {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "cancel HWR", 1);
            this.controller.cancelHWR()
        }
        if (t.label === "larger") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "font larger", 1);
            this.controller.font_larger()
        }
        if (t.label === "smaller") {
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "font smaller", 1);
            this.controller.font_smaller()
        }
        if (t.label === "save") {
            gmath.CanvasSaver.save(this);
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "save", 1)
        }
        if (t.label === "load") {
            this.remove();
            gmath.CanvasSaver.load(this.container.node());
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "load", 1)
        }
        if (t.label === "share" && !this.publishing) {
            this.publishConfirmation();
            if (gmath.log_ga) gmath.log_ga.trackEvent(this.options.gm_app_name, "button press", "publish", 1)
        }
        var n = {
            button: {
                label: t.label,
                state: t.state,
                type: t.type
            },
            old_state: e,
            time: Date.now()
        };
        if (n.button.label === "larger" || n.button.label === "smaller") n.button.font_size = DerivationList.defaultOptions.font_size;
        this.events.button(n)
    };
    t.prototype.showSaveError = function(t) {
        var e = d3.select("#publish-share-panel"),
            n = e.select("div");
        n.classed("alert-danger", true);
        e.classed("panel-default", false).classed("panel-danger", true);
        var r = this;
        n.selectAll("p").remove();
        n.append("p").html("Sorry, we could not share the canvas.</br>Reason: " + t);
        if (t.indexOf("too big") === -1) {
            n.append("p").text("Please save your work locally and try again later. Make sure you are connected to the internet!")
        } else {
            n.append("p").text("We currently don't support uploading this much data. Please save your work locally instead.")
        }
        n.append("button").property("type", "button").classed("btn btn-default", true).text("Ok").on("click", function() {
            e.remove();
            r.publishing = false
        })
    };
    t.prototype.publishConfirmation = function() {
        this.publishing = true;
        var t = this;
        var e = this.div.append("div").classed("panel panel-default", true).attr("id", "publish-share-panel").style({
            width: "500px",
            position: "absolute",
            right: "20px",
            top: "20px"
        });
        var n = e.append("div").classed("panel-body", true);
        n.append("h3").text("Share your math!");
        n.append("p").text('Click the "Publish" button to save your work on the Graspable Math server.' + "  We'll give you a key so you or anyone else can get a copy.");
        n.append("button").property("type", "button").classed("btn btn-default", true).classed("pull-right", true).text("Cancel").on("click", function() {
            e.remove();
            t.publishing = false
        });
        n.append("button").property("type", "button").classed("btn btn-primary", true).text("Publish").on("click", function() {
            n.remove();
            n = e.append("div").classed("panel-body", true);
            n.append("p").text("Working...");
            gmath.CanvasSaver.share(t.options.saves_url, t, function(e, n) {
                if (e) t.showSaveError(e.reason);
                else t.noSaveError(n)
            })
        })
    };
    t.prototype.noSaveError = function(t) {
        var e = d3.select("#publish-share-panel"),
            n = e.select("div");
        var r = this;
        n.selectAll("p").remove();
        n.append("h3").text("Here is your link:");
        n.append("div").classed("share_link", true).append("input").attr({
            type: "text"
        }).on("click", function() {
            this.select();
            this.setSelectionRange(0, this.value.length)
        }).on("input", function() {
            this.value = location.origin + location.pathname + "?load=" + t;
            this.select();
            this.setSelectionRange(0, this.value.length)
        }).node().value = location.origin + location.pathname + "?load=" + t;
        n.append("p").text("Keep this link for yourself or share it with others. It will always " + "point to the canvas as it is right now. Click the share button again if you " + "want to create a new link to an updated version.");
        n.append("button").property("type", "button").classed("btn btn-primary", true).text("Done").on("click", function() {
            e.remove();
            r.publishing = false
        })
    };
    t.prototype.launchFullScreen = function(t) {
        t = t || document.body;
        if (t.requestFullscreen) t.requestFullscreen();
        else if (t.mozRequestFullScreen) t.mozRequestFullScreen();
        else if (t.webkitRequestFullscreen) t.webkitRequestFullscreen();
        else if (t.msRequestFullscreen) t.msRequestFullscreen()
    };
    t.prototype.help = function() {
        var t = window.open("http://graspablemath.com/unstable/tutorial/index.html", "_blank");
        t.focus()
    };
    t.prototype.sendFeedback = function() {
        var t = window.open("mailto:contact@graspablemath.com", "_blank");
        t.focus()
    };
    t.prototype.cancelFullScreen = function() {
        if (document.exitFullscreen) document.exitFullscreen();
        else if (document.mozCancelFullScreen) document.mozCancelFullScreen();
        else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
        else if (document.msExitFullscreen) document.msExitFullscreen()
    };
    t.prototype.updateButton = function(t) {
        this.tools.select("button#" + t.label).datum(t).each(function(t) {
            if (t.type === "toggle") {
                t.state = !t.state;
                d3.select(this).classed("active", t.state)
            } else if (t.type === "radio") {
                var e = this;
                d3.select(this.parentNode).selectAll("button").each(function(t) {
                    t.state = e === this
                }).classed("active", function(t) {
                    return t.state
                })
            }
        })
    };
    t.prototype.appendButtonElement = function(t, e) {
        var n = this;
        var r = t.append("button").attr("id", function(t) {
            return t.label
        }).attr({
            type: "button",
            "class": "btn btn-default"
        }).classed("btn-xs", n.options.btn_size === "xs").classed("btn-sm", n.options.btn_size === "sm").classed("active", function(t) {
            return t.state
        }).style("min-width", "4em");
        if (e) r.call(mtouch_events().on("touch", e.bind(this)));
        if (this.options.display_icons) {
            var i = r.filter(function(t) {
                return t.icon
            });
            i.append("i").attr("class", function(t) {
                return t.icon
            }).style({
                color: "#555",
                "font-size": "1.2em",
                "line-height": "1.7em"
            }).style("transform", function(t) {
                return t.flip === "x" ? "rotateX(180deg)" : t.flip === "y" ? "rotateY(180deg)" : t.flip === "xy" ? "rotateZ(180deg)" : null
            });
            i.append("br")
        }
        if (this.options.display_labels) {
            r.append("span").text(function(t) {
                return t.label
            }).style("color", "#555")
        }
    };
    t.prototype.appendButtonGroup = function(t, e) {
        var n = this.tools.append("div").attr({
            "class": "btn-group",
            role: t[0].group
        }).classed("pull-right", t[0].pull_right).selectAll("button").data(t);
        n.enter().call(this.appendButtonElement.bind(this), e);
        return n
    };
    t.prototype.remove = function() {
        this.tools.remove();
        this.div.remove()
    };
    t.minimalOptions = {
        width: "100%",
        height: "100%",
        vertical_scroll: false,
        toolbar_pos: "top",
        static_toolbar: true,
        undo_btn: {
            type: "push",
            label: "undo",
            icon: "glyphicon glyphicon-chevron-left"
        },
        redo_btn: {
            type: "push",
            label: "redo",
            icon: "glyphicon glyphicon-chevron-right"
        },
        use_keyboard: false,
        use_hold_menu: false,
        drawing: false,
        display_icons: true,
        display_labels: false,
        btn_size: "xs",
        toolbar_on_style: {
            display: "inline-block",
            position: "absolute",
            "margin-top": "-35px",
            padding: "5px",
            "padding-right": "10px",
            background: "rgba(255, 255, 255, 0.901961)",
            "border-radius": "3px"
        },
        toolbar_off_style: {
            display: "none"
        },
        toolFadeoutDelay: 500,
        logo_src: "../shared/imgs/gm-logo.png"
    };
    t.defaultOptions = {
        width: "100%",
        height: "100%",
        vertical_scroll: true,
        svg_height: "200%",
        toolbar_pos: "top",
        undo_btn: {
            type: "push",
            label: "undo",
            icon: "glyphicon glyphicon-chevron-left"
        },
        redo_btn: {
            type: "push",
            label: "redo",
            icon: "glyphicon glyphicon-chevron-right"
        },
        font_smaller_btn: {
            type: "push",
            label: "smaller",
            icon: "glyphicon glyphicon-text-size",
            flip: "y"
        },
        font_larger_btn: {
            type: "push",
            label: "larger",
            icon: "glyphicon glyphicon-text-size"
        },
        help_btn: {
            type: "push",
            label: "help",
            pull_right: true,
            icon: "glyphicon glyphicon-question-sign"
        },
        hwr_btn: {
            type: "toggle",
            label: "HWR",
            pull_right: true,
            state: true,
            icon: "glyphicon glyphicon-font"
        },
        fullscreen_btn: {
            type: "toggle",
            label: "fullscreen",
            pull_right: true,
            state: false,
            icon: "glyphicon glyphicon-resize-full"
        },
        hwr: false,
        feedback_btn: {
            type: "push",
            label: "feedback",
            pull_right: true,
            icon: "glyphicon glyphicon-envelope"
        },
        feedback: false,
        ga_tracking: true,
        gm_app_name: "canvas factory",
        use_keyboard: true,
        use_hold_menu: true,
        drawing: true,
        display_icons: true,
        display_labels: true,
        btn_size: "sm",
        mode_btns: [{
            type: "radio",
            group: "mode",
            state: true,
            label: "transform",
            icon: "glyphicon glyphicon-random"
        }, {
            type: "radio",
            group: "mode",
            state: false,
            label: "scrub",
            icon: "glyphicon glyphicon-wrench"
        }, {
            type: "radio",
            group: "mode",
            state: false,
            label: "arrange",
            icon: "glyphicon glyphicon-move"
        }],
        use_toolbar: true,
        toolbar_on_style: {
            "margin-bottom": "10px"
        },
        toolbar_off_style: {
            display: "none"
        },
        toolFadeoutDelay: 0,
        save_btn: {
            type: "push",
            label: "save",
            pull_right: true,
            icon: "glyphicon glyphicon-save"
        },
        load_btn: {
            type: "push",
            label: "load",
            pull_right: true,
            icon: "glyphicon glyphicon-open"
        },
        saves_url: "http://127.0.0.1:7010/saves/test",
        loads_url: "http://127.0.0.1:7010/api/saves/test",
        share_btn: {
            type: "push",
            label: "share",
            pull_right: true,
            icon: "glyphicon glyphicon-send"
        },
        saving_and_loading: true
    };
    return t
}();
gmath.ui = gmath.ui || {};
gmath.ui.CanvasImage = function() {
    var t = function(t, e, n, r) {
        CanvasElement.call(this, t, e, n);
        this.type = "image";
        this.initCanvasImageOptions(n);
        this.initCanvasImageProperties(n);
        this.initCanvasImage();
        this.initPosition();
        this.initMode();
        if (r) this.callback()
    };
    gmath.inherit(CanvasElement, t);
    gmath.ui.CanvasImageClass = t;
    t.defaultOptions = {
        min_size: {
            width: 50
        },
        size: {
            width: 200
        }
    };
    t.prototype.initCanvasImageOptions = function(e) {
        var e = e || {};
        var n = gmath.deepCopy(t.defaultOptions);
        var r = gmath.object.extendExisting(n, e);
        if (e.image_data) r.image_data = e.image_data;
        if (e.drop_evt) {
            r.drop_evt = e.drop_evt;
            r.url = this.tryGetUrl(e.drop_evt)
        }
        if (e.url) r.url = e.url;
        this.options = gmath.extend(this.options, r)
    };
    t.prototype.initCanvasImageProperties = function(t) {
        this.size = this.options.size
    };
    t.prototype.initCanvasImage = function() {
        if (this.options.image_data || this.options.url) this.loadImage();
        else this.getDataFromFile(this.options.drop_evt)
    };
    t.prototype.tryGetUrl = function(t) {
        if (!t) return;
        if (typeof t === "string") return t;
        if (t.dataTransfer !== undefined) {
            var e = t.dataTransfer.getData("text/plain");
            if (e.slice(0, 4) === "http") {
                return e
            } else {
                var n = t.dataTransfer.getData("text/html");
                var r = $("<div>").append(n);
                var i = $(r).find("img").attr("src");
                if (typeof i !== "undefined") return i
            }
        }
        return null
    };
    t.prototype.getDataFromFile = function(t) {
        if (typeof this.options.image_data !== "undefined") return;
        if (t === null) return;
        if (typeof t.dataTransfer === "undefined") return;
        var e = new FileReader;
        e.onload = function(t) {
            this.canvas_image.options.image_data = t.target.result;
            this.canvas_image.loadImage()
        };
        e.onerror = function(t) {
            console.error("error: " + t.target.error)
        };
        e.canvas_image = this;
        e.readAsDataURL(t.dataTransfer.files[0])
    };
    t.prototype.loadImage = function() {
        this.image_for_aspect_ratio = new Image;
        this.image_for_aspect_ratio.src = this.options.url || this.options.image_data;
        this.image = document.createElementNS("http://www.w3.org/2000/svg", "image");
        this.image.addEventListener("load", this.waitForAspectRatio())
    };
    t.prototype.waitForAspectRatio = function() {
        if (this.image_for_aspect_ratio.complete) {
            this.imageLoaded()
        } else {
            var t = setTimeout(n, 100);
            var e = this;

            function n() {
                if (e.image_for_aspect_ratio.complete) {
                    e.imageLoaded()
                } else {
                    var t = setTimeout(n, 100)
                }
            }
        }
    };
    t.prototype.imageLoaded = function() {
        this.aspect_ratio = this.image_for_aspect_ratio.height / this.image_for_aspect_ratio.width;
        var t = this.size.width * this.aspect_ratio;
        this.options.min_size.height = this.options.min_size.width * this.aspect_ratio;
        if (isNaN(this.aspect_ratio)) return;
        var e = this.options.url === null ? this.options.image_data : this.options.url;
        this.image_svg = this.element_group.append("svg").style("pointer-events", "none");
        this.image = this.image_svg.append("svg:image").attr("xlink:href", e).attr("x", 0).attr("y", 0).attr("width", this.size.width).attr("height", t);
        this.resizeElement({
            width: this.size.width,
            height: t
        })
    };
    t.prototype.resize = function(t) {
        var e = t || d3.event;
        e.x = Math.max(e.x, this.options.min_size.width);
        e.y = this.size.width * this.aspect_ratio;
        this.resizeElement({
            width: e.x,
            height: e.y
        })
    };
    t.prototype.subTypeResize = function(t) {
        this.image.attr("width", this.size.width).attr("height", this.size.height)
    };
    t.prototype.toJSON = function() {
        var t = {
            type: "CanvasImage",
            id: this.id,
            pos: gmath.deepCopy(this.pos),
            size: gmath.deepCopy(this.size),
            url: this.options.url || this.options.image_data
        };
        return t
    };
    return t
}();
gmath.ui = gmath.ui || {};
gmath.ui.Keyboard = function() {
    var t = null;
    var e = function() {
        var t = function() {
            var t = "m -5.708,-15.7 20.344,0 c 3.669696,0 6.624,2.954304 6.624,6.624 l 0,17.752 c 0,3.669696 -2.954304,6.624 -6.624,6.624 l -20.488,0 -15.408,-15.48 zM -2.18,-6.948 11.716,6.948M -2.18,6.948 11.716,-6.948";
            var e = "M 13.7,16.5 -13.7,16.5 0,-16.5 z";
            var n = d3.dispatch("done", "cancel", "change"),
                r = "",
                i = false,
                o, a, s = null,
                l = null,
                p = null,
                h = null,
                u = "darkorange",
                c = 900,
                d, f, y, m, g, v, _, b = false,
                w, x = "center",
                k = null;
            var E = function() {
                D();
                w = mtouch_events().on("touch", P).on("release", O).on("hold", R).hold_time(750);
                S();
                q();
                if (r != "") o.mathquill("write", r);
                return this
            };

            function T(t) {
                n[t](o.mathquill("latex"))
            }
            E.width = function(t) {
                if (arguments.length == 0) return c;
                c = t;
                if (s) q();
                return this
            };
            E.latex = function(t) {
                if (arguments.length == 0) {
                    if (o) r = o.mathquill("latex");
                    return r
                } else {
                    r = t;
                    if (o) o.mathquill("latex", t);
                    return this
                }
            };
            E.visible = function(t) {
                if (arguments.length == 0) return i;
                if (i == t) return this;
                i = t;
                if (!s) return this;
                if (i) {
                    s.style("display", "block");
                    a.focus()
                } else s.style("display", "none");
                return this
            };
            E.position = function(t) {
                if (arguments.length == 0) return x;
                if (x == t) return this;
                x = t;
                if (!s) return this;
                s.call(H, x);
                return this
            };
            E.caption = function(t, e) {
                if (arguments.length === 0) return k;
                k = t;
                if (!p) return this;
                if (!k) p.style("display", "none");
                else {
                    h.text(t);
                    p.style("display", null)
                }
                if (e) {
                    h.style("color", e)
                }
                return this
            };
            E.warning = function(t) {
                return E.caption(t, u)
            };
            var C = function() {
                var t = [],
                    e = [];
                g.forEach(function(n) {
                    e.push(n.row);
                    t.push(n.col)
                });
                v = Math.max.apply(null, t);
                _ = Math.max.apply(null, e);
                var n = (v + 1) * 130 + v * 10 + 2 * 10 + 2 * 10,
                    r = (_ + 1) * 110 + 10 + 10 * (_ - 1) + 2 * 10 + 2 * 10,
                    i = c / n;
                f = 130 * i;
                m = 10 * i;
                y = 110 * i;
                d = r * i
            };
            var D = function() {
                g = [];
                g.keyboard = "num";
                g.formula = {
                    type: "formula",
                    col: 2,
                    row: 0,
                    cols: 6
                };
                g.push({
                    name: "Cancel",
                    type: "event",
                    event: "cancel",
                    col: 0,
                    row: 0,
                    cols: 2
                });
                g.push({
                    type: "backspace",
                    col: 8,
                    row: 0
                });
                g.push({
                    name: "Done",
                    type: "event",
                    event: "done",
                    col: 9,
                    row: 0,
                    cols: 2
                });
                g.push({
                    name: "7",
                    type: "key",
                    col: 0,
                    row: 1
                });
                g.push({
                    name: "8",
                    type: "key",
                    col: 1,
                    row: 1
                });
                g.push({
                    name: "9",
                    type: "key",
                    col: 2,
                    row: 1
                });
                g.push({
                    name: "4",
                    type: "key",
                    col: 0,
                    row: 2
                });
                g.push({
                    name: "5",
                    type: "key",
                    col: 1,
                    row: 2
                });
                g.push({
                    name: "6",
                    type: "key",
                    col: 2,
                    row: 2
                });
                g.push({
                    name: "1",
                    type: "key",
                    col: 0,
                    row: 3
                });
                g.push({
                    name: "2",
                    type: "key",
                    col: 1,
                    row: 3
                });
                g.push({
                    name: "3",
                    type: "key",
                    col: 2,
                    row: 3
                });
                g.push({
                    name: "0",
                    type: "key",
                    col: 3,
                    row: 3
                });
                g.push({
                    name: "1aα",
                    type: "next_kbd",
                    col: 11,
                    row: 0
                });
                g.push({
                    type: "arrow",
                    dir: "left",
                    col: 9,
                    row: 3,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    type: "arrow",
                    dir: "up",
                    col: 10,
                    row: 2.5,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    type: "arrow",
                    dir: "down",
                    col: 10,
                    row: 3,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    type: "arrow",
                    dir: "right",
                    col: 11,
                    row: 3,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    name: "+",
                    type: "key",
                    col: 4.5,
                    row: 1
                });
                g.push({
                    name: "−",
                    type: "key",
                    val: "-",
                    col: 5.5,
                    row: 1
                });
                g.push({
                    name: "*",
                    type: "key",
                    val: "*",
                    col: 4.5,
                    row: 2,
                    dy: "0.3em"
                });
                g.push({
                    name: "÷",
                    type: "key",
                    val: "/",
                    col: 5.5,
                    row: 2
                });
                g.push({
                    name: "(",
                    type: "key",
                    col: 4.5,
                    row: 3
                });
                g.push({
                    name: ")",
                    type: "key",
                    col: 5.5,
                    row: 3
                });
                g.push({
                    name: "^",
                    type: "key",
                    col: 8,
                    row: 1
                });
                g.push({
                    name: "=",
                    type: "key",
                    col: 8,
                    row: 3
                });
                g.push({
                    name: ",",
                    type: "key",
                    col: 7,
                    row: 1
                });
                g.push({
                    name: ".",
                    type: "key",
                    col: 3,
                    row: 2
                });
                g.push({
                    name: "x",
                    type: "key",
                    col: 7,
                    row: 2
                });
                g.push({
                    name: "y",
                    type: "key",
                    col: 8,
                    row: 2
                });
                g.push({
                    name: "_",
                    type: "key",
                    col: 7,
                    row: 3
                })
            };
            var M = function() {
                g = [];
                g.keyboard = "alpha";
                g.formula = {
                    type: "formula",
                    col: 2,
                    row: 0,
                    cols: 6
                };
                g.push({
                    name: "Cancel",
                    type: "event",
                    event: "cancel",
                    col: 0,
                    row: 0,
                    cols: 2
                });
                g.push({
                    type: "backspace",
                    col: 8,
                    row: 0
                });
                g.push({
                    name: "Done",
                    type: "event",
                    event: "done",
                    col: 9,
                    row: 0,
                    cols: 2
                });
                g.push({
                    name: "q",
                    type: "key",
                    col: 0,
                    row: 1
                });
                g.push({
                    name: "w",
                    type: "key",
                    col: 1,
                    row: 1
                });
                g.push({
                    name: "e",
                    type: "key",
                    col: 2,
                    row: 1
                });
                g.push({
                    name: "r",
                    type: "key",
                    col: 3,
                    row: 1
                });
                g.push({
                    name: "t",
                    type: "key",
                    col: 4,
                    row: 1
                });
                g.push({
                    name: "y",
                    type: "key",
                    col: 5,
                    row: 1
                });
                g.push({
                    name: "u",
                    type: "key",
                    col: 6,
                    row: 1
                });
                g.push({
                    name: "i",
                    type: "key",
                    col: 7,
                    row: 1
                });
                g.push({
                    name: "o",
                    type: "key",
                    col: 8,
                    row: 1
                });
                g.push({
                    name: "p",
                    type: "key",
                    col: 9,
                    row: 1
                });
                g.push({
                    name: "a",
                    type: "key",
                    col: .3,
                    row: 2
                });
                g.push({
                    name: "s",
                    type: "key",
                    col: 1.3,
                    row: 2
                });
                g.push({
                    name: "d",
                    type: "key",
                    col: 2.3,
                    row: 2
                });
                g.push({
                    name: "f",
                    type: "key",
                    col: 3.3,
                    row: 2
                });
                g.push({
                    name: "g",
                    type: "key",
                    col: 4.3,
                    row: 2
                });
                g.push({
                    name: "h",
                    type: "key",
                    col: 5.3,
                    row: 2
                });
                g.push({
                    name: "j",
                    type: "key",
                    col: 6.3,
                    row: 2
                });
                g.push({
                    name: "k",
                    type: "key",
                    col: 7.3,
                    row: 2
                });
                g.push({
                    name: "l",
                    type: "key",
                    col: 8.3,
                    row: 2
                });
                g.push({
                    name: "z",
                    type: "key",
                    col: .6,
                    row: 3
                });
                g.push({
                    name: "x",
                    type: "key",
                    col: 1.6,
                    row: 3
                });
                g.push({
                    name: "c",
                    type: "key",
                    col: 2.6,
                    row: 3
                });
                g.push({
                    name: "v",
                    type: "key",
                    col: 3.6,
                    row: 3
                });
                g.push({
                    name: "b",
                    type: "key",
                    col: 4.6,
                    row: 3
                });
                g.push({
                    name: "n",
                    type: "key",
                    col: 5.6,
                    row: 3
                });
                g.push({
                    name: "m",
                    type: "key",
                    col: 6.6,
                    row: 3
                });
                g.push({
                    name: "^",
                    type: "key",
                    col: 9.3,
                    row: 2,
                    cols: .6
                });
                g.push({
                    name: "1aα",
                    type: "next_kbd",
                    col: 11,
                    row: 0
                });
                g.push({
                    name: "+",
                    type: "key",
                    col: 10,
                    row: 1
                });
                g.push({
                    name: "-",
                    type: "key",
                    col: 11,
                    row: 1
                });
                g.push({
                    name: "*",
                    type: "key",
                    col: 10,
                    row: 2,
                    val: "*",
                    dy: "0.3em"
                });
                g.push({
                    name: "/",
                    type: "key",
                    col: 11,
                    row: 2
                });
                g.push({
                    name: "=",
                    type: "key",
                    col: 11,
                    row: 3
                });
                g.push({
                    name: "(",
                    type: "key",
                    col: 9,
                    row: 3
                });
                g.push({
                    name: ")",
                    type: "key",
                    col: 10,
                    row: 3
                });
                g.push({
                    name: "_",
                    type: "key",
                    col: 0,
                    row: 3,
                    cols: .6
                });
                g.push({
                    name: "shift",
                    type: "shift",
                    col: 7.6,
                    row: 3,
                    cols: 1.25
                })
            };
            var A = function() {
                g = [];
                g.keyboard = "function";
                g.formula = {
                    type: "formula",
                    col: 2,
                    row: 0,
                    cols: 6
                };
                g.push({
                    name: "Cancel",
                    type: "event",
                    event: "cancel",
                    col: 0,
                    row: 0,
                    cols: 2
                });
                g.push({
                    type: "backspace",
                    col: 8,
                    row: 0
                });
                g.push({
                    name: "Done",
                    type: "event",
                    event: "done",
                    col: 9,
                    row: 0,
                    cols: 2
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 0,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 1,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 2,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 3,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 4,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 5,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 6,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 7,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 8,
                    row: 1
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 0,
                    row: 2
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 1,
                    row: 2
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 2,
                    row: 2
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 3,
                    row: 2
                });
                g.push({
                    name: "shift",
                    type: "shift",
                    col: 9,
                    row: 1,
                    cols: 1.5
                });
                g.push({
                    name: "",
                    type: "key",
                    val: "-",
                    col: 5,
                    row: 2
                });
                g.push({
                    name: "",
                    type: "key",
                    val: "/",
                    col: 6,
                    row: 2
                });
                g.push({
                    name: "",
                    type: "key",
                    col: 7,
                    row: 2
                });
                g.push({
                    type: "arrow",
                    dir: "left",
                    col: 8,
                    row: 2,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    type: "arrow",
                    dir: "up",
                    col: 9,
                    row: 1.5,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    type: "arrow",
                    dir: "down",
                    col: 9,
                    row: 2,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    type: "arrow",
                    dir: "right",
                    col: 10,
                    row: 2,
                    cols: 1,
                    rows: .5
                });
                g.push({
                    name: "1aα",
                    type: "next_kbd",
                    col: 11,
                    row: 0
                })
            };
            var z = function() {
                g = [];
                g.keyboard = "greek";
                g.formula = {
                    type: "formula",
                    col: 2,
                    row: 0,
                    cols: 6
                };
                g.push({
                    name: "Cancel",
                    type: "event",
                    event: "cancel",
                    col: 0,
                    row: 0,
                    cols: 2
                });
                g.push({
                    type: "backspace",
                    col: 8,
                    row: 0
                });
                g.push({
                    name: "Done",
                    type: "event",
                    event: "done",
                    col: 9,
                    row: 0,
                    cols: 2
                });
                g.push({
                    name: "α",
                    type: "key",
                    col: 0,
                    row: 1
                });
                g.push({
                    name: "β",
                    type: "key",
                    col: 1,
                    row: 1
                });
                g.push({
                    name: "γ",
                    type: "key",
                    col: 2,
                    row: 1
                });
                g.push({
                    name: "δ",
                    type: "key",
                    col: 3,
                    row: 1
                });
                g.push({
                    name: "ε",
                    type: "key",
                    col: 4,
                    row: 1
                });
                g.push({
                    name: "ζ",
                    type: "key",
                    col: 5,
                    row: 1
                });
                g.push({
                    name: "η",
                    type: "key",
                    col: 6,
                    row: 1
                });
                g.push({
                    name: "θ",
                    type: "key",
                    col: 7,
                    row: 1
                });
                g.push({
                    name: "ι",
                    type: "key",
                    col: 8,
                    row: 1
                });
                g.push({
                    name: "κ",
                    type: "key",
                    col: 0,
                    row: 2
                });
                g.push({
                    name: "λ",
                    type: "key",
                    col: 1,
                    row: 2
                });
                g.push({
                    name: "μ",
                    type: "key",
                    col: 2,
                    row: 2
                });
                g.push({
                    name: "ν",
                    type: "key",
                    col: 3,
                    row: 2
                });
                g.push({
                    name: "ξ",
                    type: "key",
                    col: 4,
                    row: 2
                });
                g.push({
                    name: "ο",
                    type: "key",
                    col: 5,
                    row: 2
                });
                g.push({
                    name: "π",
                    type: "key",
                    col: 6,
                    row: 2
                });
                g.push({
                    name: "ρ",
                    type: "key",
                    col: 7,
                    row: 2
                });
                g.push({
                    name: "σ",
                    type: "key",
                    col: 0,
                    row: 3
                });
                g.push({
                    name: "τ",
                    type: "key",
                    col: 1,
                    row: 3
                });
                g.push({
                    name: "υ",
                    type: "key",
                    col: 2,
                    row: 3
                });
                g.push({
                    name: "φ",
                    type: "key",
                    col: 3,
                    row: 3
                });
                g.push({
                    name: "χ",
                    type: "key",
                    col: 4,
                    row: 3
                });
                g.push({
                    name: "ψ",
                    type: "key",
                    col: 5,
                    row: 3
                });
                g.push({
                    name: "ω",
                    type: "key",
                    col: 6,
                    row: 3
                });
                g.push({
                    name: "shift",
                    type: "shift",
                    col: 7,
                    row: 3,
                    cols: 1.5
                });
                g.push({
                    name: "+",
                    type: "key",
                    col: 9,
                    row: 1
                });
                g.push({
                    name: "-",
                    type: "key",
                    col: 10,
                    row: 1
                });
                g.push({
                    name: "*",
                    type: "key",
                    col: 9,
                    row: 2,
                    val: "*",
                    dy: "0.3em"
                });
                g.push({
                    name: "/",
                    type: "key",
                    col: 10,
                    row: 2
                });
                g.push({
                    name: "=",
                    type: "key",
                    col: 11,
                    row: 3
                });
                g.push({
                    name: "^",
                    type: "key",
                    col: 8,
                    row: 2
                });
                g.push({
                    name: "(",
                    type: "key",
                    col: 9,
                    row: 3
                });
                g.push({
                    name: ")",
                    type: "key",
                    col: 10,
                    row: 3
                });
                g.push({
                    name: "1aα",
                    type: "next_kbd",
                    col: 11,
                    row: 0
                })
            };
            var S = function() {
                s = d3.select("body").append("div").style({
                    position: "fixed",
                    bottom: 0,
                    "z-index": 1e4
                }).style("display", i ? "block" : "none");
                p = s.append("div").attr("id", "caption");
                h = p.append("span").text(k);
                p.append("span").text("x").style({
                    position: "absolute",
                    right: "5px",
                    top: "-3px",
                    color: "silver",
                    cursor: "pointer"
                }).on("click", function() {
                    E.caption(false)
                });
                l = s.append("div").classed("keyboard", true);
                o = l.append("div").attr("id", "formula").datum(g.formula).append("div").attr("id", "mq_div").append("span").attr("id", "mq_span");
                o = $(o.node()).mathquill("editable");
                a = o.find("textarea");
                if (i) a.focus();
                d3.select(a[0]).on("keyup", function() {
                    if (d3.event.keyCode === 13) T("done")
                });
                I();
                var t = l.selectAll(".key").data(g).enter().append("div").classed("key", true).call(w);
                t.filter(function(t) {
                    return t.type == "backspace"
                }).classed("backspace-key", true).append("svg").append("path");
                t.filter(function(t) {
                    return t.type == "arrow"
                }).classed("arrow-key", true).append("svg").append("path");
                t.filter(function(t) {
                    return t.name
                }).classed("normal-key", true).append("span")
            };
            var L = function() {
                l.selectAll(".key").remove();
                l.select("#formula").datum(g.formula);
                var t = l.selectAll(".key").data(g).enter().append("div").classed("key", true).call(w);
                t.filter(function(t) {
                    return t.type == "backspace"
                }).classed("backspace-key", true).append("svg").append("path");
                t.filter(function(t) {
                    return t.type == "arrow"
                }).classed("arrow-key", true).append("svg").append("path");
                t.filter(function(t) {
                    return t.name
                }).classed("normal-key", true).append("span")
            };
            var q = function() {
                C();
                s.call(H, x);
                l.style("height", d + "px").style("width", c + "px").style({
                    bottom: 0,
                    background: "#DDD",
                    padding: 0,
                    "text-align": "center",
                    border: "1px solid silver",
                    "border-radius": m * 1.5 + "px " + m * 1.5 + "px 0 0",
                    "border-bottom": "none"
                }).select("#formula").style("border", m + "px solid #DDD").style("border-radius", m + "px").call(j, m).select("#mq_div").style("border-radius", m + "px").style("width", function(t) {
                    return (t.cols || 1) * f + ((t.cols || 1) - 1) * m + "px"
                }).call(N).select("#mq_span").style("box-shadow", "none").style("-webkit-box-shadow", "none").style("-moz-box-shadow", "none").style("margin-top", m).style("font-size", y / 2 + y / 10 + "px").style("padding-top", 3 * m - 2 + "px").style("padding-bottom", 2 * m + "px").style("border", "none").style("min-height", function(t) {
                    return (t.rows || 1) * y + ((t.rows || 1) - 1) * m - 5 * m + "px"
                }).style("width", "100%");
                l.selectAll(".key").call(j).call(W).call(N);
                l.selectAll(".backspace-key path").attr("d", t).style("stroke", "black").style("stroke-width", "1.2").style("fill", "none").attr("transform", "translate(" + f / 2 + "," + y / 2 + ")scale(" + .12 * m + ")");
                l.selectAll(".arrow-key path").attr("d", e).style("stroke", "black").style("stroke-linejoin", "round").style("stroke-width", 3).style("fill", "none").attr("transform", function(t) {
                    var e = {
                        left: -90,
                        up: 0,
                        right: 90,
                        down: 180
                    }[t.dir];
                    return "translate(" + f / 2 + "," + y / 4 + ")scale(" + .05 * m + ")rotate(" + e + ")"
                });
                l.selectAll(".normal-key span").text(function(t) {
                    return t.name
                }).style("line-height", y + "px").filter(function(t) {
                    return t.dy
                }).style("display", "inline-block").style("margin-top", function(t) {
                    return t.dy
                });
                p.style({
                    position: "relative",
                    background: "rgb(244, 244, 244)",
                    padding: "12px",
                    "padding-bottom": "8px",
                    border: "1px solid silver",
                    "border-radius": "7.6px 7.6px 0 0",
                    "border-bottom": "none",
                    width: 4 * f + 3 * m + "px",
                    "margin-left": 8 * f + 10 * m + "px",
                    "font-family": "HelveticaNeue-Light",
                    color: "#666",
                    "font-size": "17px",
                    "text-align": "center",
                    display: k ? null : "none"
                })
            };
            var I = function() {
                if (/iPhone|iPod|iPad|Android|BlackBerry/.test(navigator.userAgent)) l.select(".textarea textarea").attr("readonly", "readonly")
            };
            var P = function(t) {
                d3.select(this).style("background", "gray");
                if (t.type === "formula") return;
                a.focus();
                if (t.type === "next_kbd") {
                    F()
                } else if (t.type === "shift") {
                    B(t)
                } else if (t.type === "key") {
                    var e = t.val || t.name;
                    if (b) e = e.toUpperCase();
                    var n = e.charCodeAt(0);
                    a.val(e);
                    if (n !== 46) a.trigger($.Event("keydown", {
                        which: n
                    }));
                    a.trigger($.Event("keypress", {
                        which: n
                    }));
                    T("change")
                } else if (t.type === "backspace") {
                    a.trigger($.Event("keydown", {
                        which: 8
                    }));
                    T("change")
                } else if (t.type === "event") {
                    T(t.event)
                } else if (t.type === "arrow") {
                    var n = {
                        left: 37,
                        up: 38,
                        right: 39,
                        down: 40
                    }[t.dir];
                    a.trigger($.Event("keydown", {
                        which: n
                    }));
                    T("change")
                }
            };
            var F = function() {
                b = false;
                if (g.keyboard === "num") {
                    M()
                } else if (g.keyboard === "alpha") {
                    z()
                } else if (g.keyboard === "greek") {
                    D()
                }
                L();
                q()
            };
            var B = function(t) {
                b = !b;
                l.selectAll(".key span").text(function(t) {
                    if (t.type === "key") {
                        if (b) return t.name.toUpperCase();
                        else return t.name.toLowerCase()
                    } else {
                        return t.name
                    }
                })
            };
            var O = function(t) {
                if (t.type !== "shift" || !b) d3.select(this).style("background", t.type == "key" || t.type == "formula" ? "white" : "silver")
            };
            var R = function(t) {
                if (t.type !== "backspace") return;
                o.mathquill("latex", "");
                a.focus()
            };
            var j = function(t, e) {
                e = e || 0;
                t.style("position", "absolute").style("left", function(t) {
                    return t.col * (f + m) + 2 * m - e + "px"
                }).style("bottom", function(t) {
                    return (_ - t.row) * (y + m) + (t.row == 0 ? 0 : 0) + 2 * m - e + "px"
                })
            };
            var W = function(t, e, n) {
                e = e || 0;
                n = n || 0;
                t.style("width", function(t) {
                    return (t.cols || 1) * f + ((t.cols || 1) - 1) * m - 2 * e + "px"
                }).style("height", function(t) {
                    return (t.rows || 1) * y + ((t.rows || 1) - 1) * m - 2 * n + "px"
                })
            };
            var N = function(t) {
                t.style("border-radius", m + "px").style("font-size", y / 2 + "px").style("background", function(t) {
                    return t.type == "key" || t.type == "formula" ? "white" : "silver"
                }).style("box-shadow", "#888 0px 1px 0px").style("font-family", "'HelveticaNeue-UltraLight', 'Helvetica Neue UltraLight', 'Helvetica Neue', Arial, Helvetica, sans-serif").style("font-weight", 100).style("border", "none").style("padding", 0).style("-webkit-user-select", "none").style("-khtml-user-select", "none").style("-moz-user-select", "none").style("-ms-user-select", "none").style("user-select", "none").style("cursor", "pointer")
            };
            var H = function(t, e) {
                if (e === "center") {
                    t.style("margin-left", -c / 2 + "px");
                    t.style("left", "50%");
                    t.style("right", null)
                } else if (e === "left") {
                    t.style("margin-left", 0);
                    t.style("left", 0);
                    t.style("right", null)
                } else if (e === "right") {
                    t.style("margin-left", 0);
                    t.style("left", null);
                    t.style("right", 0)
                } else {
                    t.style("margin-left", -c / 2 + "px");
                    t.style("left", e);
                    t.style("right", null)
                }
            };
            return d3.rebind(E, n, "on")
        };
        return t
    };
    return function() {
        return t || (t = e()())
    }
}();
gmath.ui = gmath.ui || {};
gmath.ui.TutorialPair = function() {
    var t = function(t, e) {
        this.events = d3.dispatch("done", "retry", "next");
        this.gestureData = e.gestureData;
        if (this.gestureData) this.gestureData.options.show_bg = false;
        this.eq = e.eq;
        this.correctAnswers = e.correctAnswers;
        this.extraExamples = e.extraExamples;
        this.currentExtra = 0;
        this.title = e.title;
        this.text = e.text;
        this.startWiggle = e.startWiggle;
        this.doNotWiggle = false;
        this.container = d3.select(t);
        this.dl_div = null;
        this.dl = null;
        this.play_btn = gmath.svg_play_button();
        this.player = null;
        this.allow_restart_after_done = true;
        this.answered = false;
        if ("allow_restart_after_done" in e) this.allow_restart_after_done = e.allow_restart_after_done;
        this.reporter_options = e.reporter_options;
        this.task_name = e.task_name;
        this.init()
    };
    t.prototype.replay = function() {
        this.play_btn.hidden(true);
        var t = this;
        t.player.replay(500, function() {
            setTimeout(function() {
                t.play_btn.hidden(false);
                if (!t.answered) {
                    t.dl_div.append("span").text("Try it!").classed("tryit", true);
                    if (t.startWiggle && !t.doNotWiggle) t.dl.startWiggle(t.startWiggle);
                    t.dl_div.on("mousedown", function() {
                        var e = new Date;
                        t.startTime = e.getTime();
                        t.dl_div.select("span.tryit").remove();
                        t.dl_div.on("mousedown", null)
                    })
                }
            }, 1e3)
        })
    };
    t.prototype.deactivateFutureWiggling = function() {
        this.doNotWiggle = true
    };
    t.prototype.init = function() {
        this.container.append("h2").text(this.title);
        this.container.append("p").attr("class", "tutorial-instructions").text(this.text);
        var t = this.container.append("div").classed("tutorial", true);
        var e = t.append("div").attr("id", "ex").classed("choice", true).append("svg").classed("animation", true);
        console.log(this.gestureData.options);
        this.gestureData.options.pos = {
            x: "center",
            y: "center"
        };
        this.gestureData.options.draggable = false;
        this.gestureData.options.collapsed_mode = true;
        this.gestureData.options.no_history = false;
        this.gestureData.options.no_handles = true;
        this.player = new gmath.EventRecorder(this.gestureData, e.append("g").node());
        this.player.showPreview();
        e.call(this.play_btn.on("click", this.replay.bind(this)));
        if (this.eq) {
            this.dl_div = t.append("div").classed("choice", true);
            var n = gmath.deepCopy(this.gestureData.options);
            n.inactive_color = gmath.AlgebraView.defaultOptions.inactive_color;
            n.color = gmath.AlgebraView.defaultOptions.color;
            n.h_align = "center";
            var r = new gmath.ui.CanvasFactory(this.dl_div.node(), {
                vertical_scroll: false,
                use_toolbar: false,
                use_keyboard: false,
                svg_height: "100%",
                reporter_options: this.reporter_options
            });
            this.reporter = r.reporter;
            r.reporter.setListening(false);
            this.dl = r.model.createDL(n);
            r.reporter.setListening(true);
            this.dl.getLastRow().view.interaction_handler.events.on("touch", this.deactivateFutureWiggling.bind(this));
            this.dl.events.on("end-of-interaction", this.checkAnswer.bind(this));
            this.startTime = -1;
            var i = this
        }
    };
    t.prototype.chainTransition = function(t, e) {
        if (t.node().__transition__ && t.id && t.node().__transition__[t.id]) {
            var n = t.node().__transition__[t.id];
            console.log("extra delay", n.delay + n.duration);
            e += n.delay + n.duration
        }
        return t.transition().delay(e)
    };
    t.prototype.neutralTransition = function(t, e, n, r) {
        t.selectAll("button").remove();
        t.select("span").remove();
        var i = this.chainTransition(t, e).duration(n || 500);
        if (r) i.styleTween("background", function() {
            return d3.interpolate(r, "#EEEEEE")
        });
        else i.style("background", "#eee");
        return i
    };
    t.prototype.wrongTransition = function(t, e, n, r) {
        var i = d3.select(t.node());
        i.append("span").attr("class", "feedback").style({
            opacity: 1e-5
        }).text("✗");
        var o = this.chainTransition(t, e).duration(n || 500);
        if (r) o.styleTween("background", function() {
            return d3.interpolate(r, "#E0A8A8")
        });
        else o.style("background", "#E0A8A8");
        o.select(".feedback").style("opacity", 1);
        return o
    };
    t.prototype.correctTransition = function(t, e, n, r) {
        var i = this;
        var o = d3.select(t.node());
        o.append("span").attr("class", "feedback").style({
            opacity: 1e-5
        }).text("✓");
        o.append("button").text("do it again").style({
            top: "10px",
            opacity: 1e-5
        }).on("click", function() {
            i.reporter.submitCustomSummary({
                type: "tutorial-reset",
                task_name: i.task_name,
                eq_start: i.dl.rows[0].model.to_ascii(),
                eq_end: i.dl.getLastModel().to_ascii()
            });
            if (i.allow_restart_after_done) i.retry()
        });
        o.append("button").text("try another").style({
            top: "62px",
            opacity: 1e-5
        }).on("click", function() {
            i.reporter.submitCustomSummary({
                type: "tutorial-alternative-example",
                task_name: i.task_name,
                eq_start: i.dl.rows[0].model.to_ascii()
            });
            if (i.extraExamples.length > 0) i.loadNextExample();
            else i.retry()
        });
        var a = this.chainTransition(t, e).duration(n || 500);
        if (r) a.styleTween("background", function() {
            return d3.interpolate(r, "#A8E0B3")
        });
        else a.style("background", "#A8E0B3");
        a.select(".feedback").style("opacity", 1);
        a.selectAll("button").style("opacity", 1);
        return a
    };
    t.prototype.checkAnswer = function() {
        var t = this,
            e = 400;
        setTimeout(function() {
            t.dl.getLastView().interactive(false);
            var e = t.dl.getLastModel().to_ascii();
            console.log(e);
            var n = new Date;
            var r = -1;
            var i = -1;
            if (t.startTime !== -1) r = n.getTime() - t.startTime;
            if (t.eq === t.dl.getLastModel().to_ascii()) {
                t.dl.getLastView().interactive(true);
                i = "initial state"
            } else if (t.answerIsCorrect(e)) {
                t.answered = true;
                t.reporter.submitCustomSummary({
                    type: "tutorial-success",
                    task_name: t.task_name,
                    eq_start: t.dl.rows[0].model.to_ascii(),
                    eq_end: t.dl.getLastModel().to_ascii()
                });
                i = "correct";
                if (t.dl_div.selectAll("div").size() === 2) return;
                t.correctTransition(t.dl_div, 200, null, "#EEEEEE").each("end", t.events.done)
            } else {
                i = "wrong";
                t.reporter.submitCustomSummary({
                    type: "tutorial-fail",
                    task_name: t.task_name,
                    eq_start: t.dl.rows[0].model.to_ascii(),
                    eq_end: t.dl.getLastModel().to_ascii()
                });
                t.wrongTransition(t.dl_div, 200, null, "#EEEEEE").transition().duration(500).each("end", t.retry.bind(t));
                t.doNotWiggle = false
            }
            if (gmath.log_ga) gmath.log_ga.trackEvent("tutorial", i, t.eq, r)
        }, e)
    };
    t.prototype.answerIsCorrect = function(t) {
        if (this.currentExtra === 0) {
            return this.correctAnswers.indexOf(t) !== -1
        } else {
            return this.extraExamples[this.currentExtra - 1].correctAnswers.indexOf(t) !== -1
        }
    };
    t.prototype.loadNextExample = function() {
        var t = this,
            e = t.dl.rows[0].model.to_ascii();
        this.neutralTransition(this.dl_div, 0, 1).each("end", function() {
            t.dl.getLastView().interactive(true);
            if (t.currentExtra < t.extraExamples.length) {
                t.dl.setExpression(t.extraExamples[++t.currentExtra - 1].expression);
                t.dl.updateRowDimensions();
                t.dl.initPosition();
                t.doNotWiggle = true
            } else {
                t.currentExtra = 0;
                t.dl.setExpression(t.eq);
                t.dl.updateRowDimensions();
                t.dl.initPosition();
                t.doNotWiggle = false
            }
            t.events.next()
        })
    };
    t.prototype.retry = function() {
        var t = this;
        this.neutralTransition(this.dl_div, 0, 1).each("end", function() {
            t.dl.getLastView().interactive(true);
            t.dl.setExpression(t.currentExtra === 0 ? t.eq : t.extraExamples[t.currentExtra - 1].expression);
            t.dl.updateRowDimensions();
            t.dl.initPosition();
            t.events.retry()
        });
        this.answered = false;
        this.doNotWiggle = false
    };
    t.prototype.stop = function() {
        this.player.stop_animation()
    };
    return t
}();
gmath.ui = gmath.ui || {};
gmath.ui.ProblemPair = function() {
    var t = function(t, e) {
        this.events = d3.dispatch("done", "reset");
        this.title = e.title;
        this.text = e.text;
        this.gestureData = e.gestureData;
        if (this.gestureData) this.gestureData.options.show_bg = false;
        this.eq = e.eq;
        this.correctAnswers = e.correctAnswers;
        this.startWiggle = e.startWiggle;
        this.doNotWiggle = false;
        this.container = d3.select(t);
        this.dl_div = null;
        this.dl = null;
        this.play_btn = gmath.svg_play_button();
        this.player = null;
        this.answered = false;
        this.allow_restart_after_done = true;
        if ("allow_restart_after_done" in e) this.allow_restart_after_done = e.allow_restart_after_done;
        this.reporter_options = e.reporter_options;
        this.task_name = e.task_name;
        this.init()
    };
    t.prototype.replay = function() {
        this.play_btn.hidden(true);
        var t = this;
        t.player.replay(500, function() {
            setTimeout(function() {
                t.play_btn.hidden(false);
                if (!t.answered) {
                    t.dl_div.append("span").text("Try it!").classed("tryit", true);
                    if (t.startWiggle && !t.doNotWiggle) t.dl.startWiggle(t.startWiggle);
                    t.dl_div.on("mousedown", function() {
                        t.dl_div.select("span").remove();
                        t.dl_div.on("mousedown", null)
                    })
                }
            }, 1e3)
        })
    };
    t.prototype.deactivateFutureWiggling = function() {
        this.doNotWiggle = true
    };
    t.prototype.init = function() {
        this.container.append("h2").text(this.title);
        this.container.append("p").attr("class", "tutorial-instructions").text(this.text);
        var t = this.container.append("div").classed("tutorial", true);
        var e = t.append("div").attr("id", "ex").classed("largeChoice", true).append("svg").classed("animation", true);
        this.gestureData.options.pos = {
            x: "center",
            y: "center"
        };
        this.gestureData.options.draggable = false;
        this.player = new gmath.EventRecorder(this.gestureData, e.append("g").node());
        this.player.showPreview();
        e.call(this.play_btn.on("click", this.replay.bind(this)));
        if (this.eq) {
            this.dl_div = t.append("div").classed("largeChoice", true);
            var n = gmath.deepCopy(this.gestureData.options);
            n.inactive_color = gmath.AlgebraView.defaultOptions.inactive_color;
            n.color = gmath.AlgebraView.defaultOptions.color;
            n.h_align = "center";
            var r = new gmath.ui.CanvasFactory(this.dl_div.node(), {
                vertical_scroll: false,
                use_toolbar: false,
                use_keyboard: false,
                svg_height: "100%",
                reporter_options: this.reporter_options
            });
            this.reporter = r.reporter;
            r.reporter.setListening(false);
            this.dl = r.model.createDL(n);
            r.reporter.setListening(true);
            this.dl.getLastRow().view.interaction_handler.events.on("touch", this.deactivateFutureWiggling.bind(this));
            this.dl.events.on("end-of-interaction", this.checkAnswer.bind(this))
        }
    };
    t.prototype.chainTransition = function(t, e) {
        if (t.node().__transition__ && t.id && t.node().__transition__[t.id]) {
            var n = t.node().__transition__[t.id];
            console.log("extra delay", n.delay + n.duration);
            e += n.delay + n.duration
        }
        return t.transition().delay(e)
    };
    t.prototype.neutralTransition = function(t, e) {
        var n = this.chainTransition(t, e).duration(500);
        n.style("background", "#eee");
        n.select("span").remove();
        n.selectAll("div").remove();
        this.reset_btn = null;
        return n
    };
    t.prototype.wrongTransition = function(t, e) {
        var n = this;
        if (!this.reset_btn) {
            this.reset_btn = t.append("div").classed("smallLabel", true).classed("light", true).style("opacity", 1e-5).append("button").text("reset").on("click", function() {
                n.reset()
            })
        }
        var r = this.chainTransition(t, e).duration(500);
        r.select("div").style("opacity", 1);
        return r
    };
    t.prototype.correctTransition = function(t, e) {
        var n = this;
        if (this.reset_btn) {
            this.reset_btn.remove()
        }
        t.append("span").classed("smallLabel", true).text("good").style({
            opacity: 1e-4,
            height: "50%",
            "line-height": "110px"
        });
        t.append("div").classed("smallLabel", true).style({
            opacity: 1e-4,
            height: "50%",
            top: "120px"
        }).append("button").text("reset").style({
            "margin-top": "40px"
        }).on("click", function() {
            n.reporter.submitCustomSummary({
                type: "tutorial-reset",
                task_name: n.task_name,
                eq_start: n.dl.rows[0].model.to_ascii(),
                eq_end: n.dl.getLastModel().to_ascii()
            });
            n.reset()
        });
        var r = this.chainTransition(t, e).duration(500);
        r.style("background", "#A8E0B3");
        r.select("span.smallLabel").style("opacity", 1);
        r.selectAll("div").style("opacity", 1);
        return r
    };
    t.prototype.checkAnswer = function() {
        this.dl.getLastView().interactive(false);
        var t = this.dl.getLastModel().to_ascii();
        if (this.eq === this.dl.getLastModel().to_ascii()) {
            this.dl.getLastView().interactive(true)
        } else if (this.correctAnswers.indexOf(t) !== -1) {
            this.answered = true;
            this.reporter.submitCustomSummary({
                type: "tutorial-success",
                task_name: this.task_name,
                eq_start: this.dl.rows[0].model.to_ascii(),
                eq_end: this.dl.getLastModel().to_ascii()
            });
            this.dl_div.select("span").text("good");
            this.correctTransition(this.dl_div, 200).each("end", this.events.done)
        } else {
            this.reporter.submitCustomSummary({
                type: "tutorial-fail",
                task_name: this.task_name,
                eq_start: this.dl.rows[0].model.to_ascii(),
                eq_end: this.dl.getLastModel().to_ascii()
            });
            this.wrongTransition(this.dl_div, 200);
            this.dl.getLastView().interactive(true)
        }
    };
    t.prototype.reset = function() {
        var t = this;
        this.neutralTransition(this.dl_div, 0).each("end", function() {
            t.dl.getLastView().interactive(true);
            t.dl.setExpression(t.eq);
            t.dl.initPosition();
            t.events.reset()
        });
        this.answered = false;
        this.doNotWiggle = false
    };
    t.prototype.stop = function() {
        this.player.stop_animation()
    };
    return t
}();
var Timeline = {};
Timeline.entryTypes = {};
Timeline.entry = function(t, e) {
    t = t[0];
    for (var n in Timeline.entryTypes) {
        var r = Timeline.entryTypes[n];
        if (r.prototype.match(t)) return new r(t, e)
    }
    return null
};
var EntryType = function(t) {
    this.type = t
};
EntryType.prototype.match = function(t) {
    return this.type === t.type
};
var AlgebraEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, AlgebraEntry);
AlgebraEntry.prototype.type = "algebra";
Timeline.entryTypes.AlgebraEntry = AlgebraEntry;
AlgebraEntry.prototype.match = function(t) {
    return this.type === t.type && !t.targets
};
AlgebraEntry.prototype.undo = function(t) {
    this.rows = [];
    this.packState = this.object.rows.map(function(t) {
        return t.hidden ? true : false
    });
    while (this.object.getLastRow().idx !== this.summary.element.subid) {
        this.rows.push(this.object.undo())
    }
};
AlgebraEntry.prototype.redo = function(t) {
    for (var e = this.rows.length - 1; e >= 0; e--) {
        this.object.redo(this.rows[e])
    }
    for (var e = 0; e < this.object.rows.length; e++) {
        var n = this.object.rows[e];
        if (this.packState[e] && !n.hidden) n.hide();
        else if (!this.packState[e] && n.hidden) n.unhide()
    }
    this.object.layoutRows()
};
var SubstituteEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.objects = [];
    for (var n = 0; n < this.summary.targets.length; n++) {
        this.objects.push({
            dl: e.getElementByID(this.summary.targets[n].id)
        })
    }
};
gmath.inherit(EntryType, SubstituteEntry);
SubstituteEntry.prototype.type = "algebra";
Timeline.entryTypes.SubstituteEntry = SubstituteEntry;
SubstituteEntry.prototype.match = function(t) {
    return this.type === t.type && t.targets
};
SubstituteEntry.prototype.undo = function(t) {
    for (var e = 0; e < this.objects.length; e++) {
        var n = this.objects[e];
        n.rows = [];
        n.packState = n.dl.rows.map(function(t) {
            return t.hidden ? true : false
        });
        while (n.dl.getLastRow().idx !== this.summary.targets[e].subid) {
            n.rows.push(n.dl.undo())
        }
    }
};
SubstituteEntry.prototype.redo = function(t) {
    for (var e = 0; e < this.objects.length; e++) {
        var n = this.objects[e];
        for (var r = n.rows.length - 1; r >= 0; r--) {
            n.dl.redo(n.rows[r])
        }
        for (var r = 0; r < n.dl.rows.length; r++) {
            var i = n.dl.rows[r];
            if (n.packState[r] && !i.hidden) i.hide();
            else if (!n.packState[r] && i.hidden) i.unhide()
        }
        n.dl.layoutRows()
    }
};
var CreateEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.objects = [];
    for (var n = 0; n < this.summary.targets.length; n++) {
        this.objects.push(e.getElementByID(this.summary.targets[n].id))
    }
};
gmath.inherit(EntryType, CreateEntry);
CreateEntry.prototype.type = "create";
Timeline.entryTypes.CreateEntry = CreateEntry;
CreateEntry.prototype.match = function(t) {
    return this.type === t.type && t.targets.every(function(t) {
        return t.type === "dl" || t.type === "textbox" || t.type === "image"
    })
};
CreateEntry.prototype.undo = function(t) {
    for (var e = 0; e < this.objects.length; e++) {
        t.removeCanvasElement(this.objects[e])
    }
};
CreateEntry.prototype.redo = function(t) {
    for (var e = 0; e < this.objects.length; e++) {
        t.addCanvasElement(this.objects[e])
    }
};
var DeleteEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getDeletedElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, DeleteEntry);
DeleteEntry.prototype.type = "delete";
Timeline.entryTypes.Entry = DeleteEntry;
DeleteEntry.prototype.match = function(t) {
    return this.type === t.type && (t.element.type === "dl" || t.element.type === "textbox" || t.element.type === "image")
};
DeleteEntry.prototype.undo = function(t) {
    t.addCanvasElement(this.object)
};
DeleteEntry.prototype.redo = function(t) {
    t.removeCanvasElement(this.object)
};
var DrawEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getElementByID(this.summary.targets[0].id)
};
gmath.inherit(EntryType, DrawEntry);
DrawEntry.prototype.type = "draw";
Timeline.entryTypes.DrawEntry = DrawEntry;
DrawEntry.prototype.undo = function(t) {
    t.removePath(this.object)
};
DrawEntry.prototype.redo = function(t) {
    t.addPath(this.object)
};
var EraseEntry = function(t) {
    EntryType.call(this, t.type);
    this.summary = t
};
gmath.inherit(EntryType, EraseEntry);
EraseEntry.prototype.type = "erase";
Timeline.entryTypes.EraseEntry = EraseEntry;
EraseEntry.prototype.match = function(t) {
    return this.type === t.type
};
EraseEntry.prototype.undo = function(t) {
    if (!this.modification) {
        console.warn("erase modification was not set");
        return
    }
    this.modification.removed.forEach(function(e) {
        t.addPath(e)
    });
    this.modification.added.forEach(function(e) {
        t.removePath(e)
    });
    this.modification.modified.forEach(function(e) {
        e.path.points = e.points_before;
        t.updatePath(e.path)
    })
};
EraseEntry.prototype.redo = function(t) {
    this.modification.removed.forEach(function(e) {
        t.removePath(e)
    });
    this.modification.modified.forEach(function(e) {
        e.path.points = e.points_after;
        t.updatePath(e.path)
    });
    this.modification.added.forEach(function(e) {
        t.addPath(e)
    })
};
var MoveEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, MoveEntry);
MoveEntry.prototype.type = "move";
Timeline.entryTypes.MoveEntry = MoveEntry;
MoveEntry.prototype.match = function(t) {
    return this.type === t.type && (t.element.type === "dl" || t.element.type === "textbox" || t.element.type === "image")
};
MoveEntry.prototype.undo = function(t) {
    this.object.translateElement(this.summary.element.old_state)
};
MoveEntry.prototype.redo = function(t) {
    this.object.translateElement(this.summary.element.new_state)
};
var FontSizeEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    if (this.summary.element.type === "textbox") this.textbox = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, FontSizeEntry);
FontSizeEntry.prototype.type = "font_size";
Timeline.entryTypes.FontSizeEntry = FontSizeEntry;
FontSizeEntry.prototype.undo = function(t, e) {
    var n = this.summary.element.new_state,
        r = this.summary.element.old_state;
    if (this.summary.element.type == "textbox") {
        if (n > r) this.textbox.decreaseTextSize();
        else this.textbox.increaseTextSize()
    } else {
        if (n > r) e.font_smaller();
        else e.font_larger()
    }
};
FontSizeEntry.prototype.redo = function(t, e) {
    var n = this.summary.element.new_state,
        r = this.summary.element.old_state;
    if (this.summary.element.type === "textbox") {
        if (n > r) this.textbox.increaseTextSize();
        else this.textbox.decreaseTextSize()
    } else {
        if (n > r) e.font_larger();
        else e.font_smaller()
    }
};
var PackEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, PackEntry);
PackEntry.prototype.type = "pack";
Timeline.entryTypes.PackEntry = PackEntry;
PackEntry.prototype.match = function(t) {
    return this.type === t.type && !this.startingAndEndingPackStateAreTheSame(t)
};
PackEntry.prototype.startingAndEndingPackStateAreTheSame = function(t) {
    var e = t.element.old_state,
        n = t.element.new_state;
    for (var r = 0; r < e.length; r++) {
        if (e[r] !== n[r]) return false
    }
    return true
};
PackEntry.prototype.undo = function(t) {
    var e = this.object.rows,
        n = this.summary.element.old_state;
    for (var r = 0; r < e.length; r++) {
        if (e[r].hidden && !n[r]) e[r].unhide();
        else if (!e[r].hidden && n[r]) e[r].hide()
    }
    this.object.layoutRows()
};
PackEntry.prototype.redo = function(t) {
    var e = this.object.rows,
        n = this.summary.element.new_state;
    for (var r = 0; r < e.length; r++) {
        if (e[r].hidden && !n[r]) e[r].unhide();
        else if (!e[r].hidden && n[r]) e[r].hide()
    }
    this.object.layoutRows()
};
var CloneEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getElementByID(this.summary.targets[0].id)
};
gmath.inherit(EntryType, CloneEntry);
CloneEntry.prototype.type = "clone";
Timeline.entryTypes.CloneEntry = CloneEntry;
CloneEntry.prototype.match = function(t) {
    return this.type === t.type
};
CloneEntry.prototype.undo = function(t) {
    this.links = t.removeDL(this.object)
};
CloneEntry.prototype.redo = function(t) {
    t.addDL(this.object);
    gmath.LinkCoordinator.addLinks(this.links)
};
var ScrubEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.object = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, ScrubEntry);
ScrubEntry.prototype.type = "scrub";
Timeline.entryTypes.ScrubEntry = ScrubEntry;
ScrubEntry.prototype.match = function(t) {
    return this.type === t.type
};
ScrubEntry.prototype.undo = function(t) {
    var e = this.object.rows[0].model;
    var n = e.replace_with(new gmath.AlgebraModel(this.summary.element.old_state, e.options));
    this.object.rows[0].updateDimensionAfterInteraction();
    this.object.updateRowDimensions();
    this.object.rows[0].view.update_existing()
};
ScrubEntry.prototype.redo = function(t) {
    var e = this.object.rows[0].model;
    var n = e.replace_with(new gmath.AlgebraModel(this.summary.element.new_state, e.options));
    this.object.rows[0].updateDimensionAfterInteraction();
    this.object.updateRowDimensions();
    this.object.rows[0].view.update_existing()
};
var TextEditEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.textbox = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, TextEditEntry);
TextEditEntry.prototype.type = "text";
Timeline.entryTypes.TextEditEntry = TextEditEntry;
TextEditEntry.prototype.undo = function(t) {
    this.textbox.text_el.node().innerHTML = this.summary.element.old_state;
    this.textbox.update()
};
TextEditEntry.prototype.redo = function(t) {
    this.textbox.text_el.node().innerHTML = this.summary.element.new_state;
    this.textbox.update()
};
var ResizeEntry = function(t, e) {
    EntryType.call(this, t.type);
    this.summary = t;
    this.canvasElement = e.getElementByID(this.summary.element.id)
};
gmath.inherit(EntryType, ResizeEntry);
ResizeEntry.prototype.type = "resize";
Timeline.entryTypes.ResizeEntry = ResizeEntry;
ResizeEntry.prototype.match = function(t) {
    return this.type === t.type
};
ResizeEntry.prototype.undo = function(t) {
    this.canvasElement.resizeElement(this.summary.element.old_state)
};
ResizeEntry.prototype.redo = function(t) {
    this.canvasElement.resizeElement(this.summary.element.new_state)
};
gmath.gmifyPage = function(t, e) {
    e = e || {};
    coordinator = new DLCoordinator;
    var n = t ? d3.select(t) : d3.select("body");
    var r = n.size() > 0 && n.classed("gmify-canvas") ? n : n.selectAll(".gmify-canvas");
    r.each(function() {
        var t = d3.select(this);
        var e = t.text().split(";");
        try {
            e.forEach(gmath.AlgebraModel.getDefaultParser().parse);
            t.classed("gmify-canvas", false).classed("gmified-canvas", true);
            t.classed("bootstrap-styles", true);
            t.select("*").remove();
            var n = new gmath.ui.CanvasFactory(this, {
                height: "500px"
            });
            fixAggressiveAssistmentsStyles(t);
            var r = {
                pos: ["auto", 20],
                v_align: "top"
            };
            n.model.createDLs(e, r)
        } catch (i) {
            console.log('could not parse "' + e + '". Error:', i)
        }
    });
    r = n.size() > 0 && n.classed("gmify-minimal") ? n : n.selectAll(".gmify-minimal");
    r.each(function() {
        var t = d3.select(this);
        var e = t.text();
        try {
            gmath.AlgebraModel.getDefaultParser().parse(e);
            t.classed("gmify-minimal", false).classed("gmified-minimal", true);
            t.classed("bootstrap-styles", true);
            t.select("*").remove();
            t.text("");
            var n = t.insert("svg").style({
                overflow: "visible",
                display: "block",
                width: "100%"
            });
            gmath.DerivationList.createFixedSingleLineDL(n.node(), {
                eq: e
            })
        } catch (r) {
            console.log('could not parse "' + e + '". Error:', r)
        }
    });
    r = n.size() > 0 && n.classed("gmify") ? n : n.selectAll(".gmify");
    r.each(function(t, n) {
        var r = d3.select(this),
            i = r.text();
        try {
            gmath.AlgebraModel.getDefaultParser().parse(i);
            r.classed("gmify", false).classed("gmified", true);
            r.classed("bootstrap-styles", true);
            r.select("*").remove();
            r.text("");
            var o = r.insert("div").style({
                overflow: "visible",
                display: "block",
                "margin-top": "30px"
            });
            var a = new gmath.ui.CanvasFactory(o.node(), {
                    minimal: true,
                    logo_src: e.logo_src
                }),
                s = a.model.createDL({
                    eq: i,
                    pos: {
                        x: 0,
                        y: 0
                    },
                    cloning_on: false,
                    normal_font: {
                        family: "Kalam"
                    },
                    italic_font: {
                        family: "Kalam"
                    },
                    font_baseline_shift: .4,
                    font_ascent: .9,
                    font_descent: .2,
                    slanted_div_bar: true,
                    div_bar_height: 1 / 14,
                    font_size: "45",
                    row_border_color: "#ddd",
                    handle_stroke_color: "#d8d8d8",
                    keep_in_container: true
                });
            fixAggressiveAssistmentsStyles(r);
            coordinator.subscribeToCanvasModel(a.model);
            coordinator.addDL(s);
            a.focusOnDL(s);
            a.controller.clearInteractionTimeline()
        } catch (l) {
            console.log('could not parse "' + i + '". Error:', l)
        }
    })
};
fixAggressiveAssistmentsStyles = function(t) {
    t.selectAll(".btn-toolbar button span").style("font-size", "12px");
    t.selectAll(".btn-toolbar button br").style("font-size", "12px")
};